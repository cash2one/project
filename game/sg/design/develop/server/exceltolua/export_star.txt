--导出星图配置表
----------------------------------------------------------------------------------------
--写文件
function writeConfig(configname, concent)
	if not concent then
		print("concent is null")
		return
	end

	if not configname then
		print("configname is null")
		return
	end

	local f = io.open(configname, "w")
	f:write(concent)
	f:close()
end

--number_index_flag 为true的时候加入数字下标(默认不加)
local function sz_T2S(_t , number_index_flag)
   local szRet = "{"
    function doT2S(_i, _v)
        if "number" == type(_i) then
        	if number_index_flag then
            	szRet = szRet .. "[" .. _i .. "] = "	--导表中是有坑的，在需要将配置导入C++的时候一定要将这行注释掉（但是只有当table为数组时才能这样做）
            end
            if "number" == type(_v) then
                szRet = szRet .. _v .. ","
            elseif "string" == type(_v) then
                szRet = szRet .. '"' .. _v .. '"' .. ","
            elseif "table" == type(_v) then
                szRet = szRet .. sz_T2S(_v,number_index_flag) .. ","
            else
                szRet = szRet .. "nil,"
            end
        elseif "string" == type(_i) then
            szRet = szRet .. _i..' = '
            if "number" == type(_v) then
                szRet = szRet .. _v .. ","
            elseif "string" == type(_v) then
                szRet = szRet .. '"' .. _v .. '"' .. ","
            elseif "table" == type(_v) then
                szRet = szRet .. sz_T2S(_v,number_index_flag) .. ","
            else
                szRet = szRet .. "nil,"
            end
        end
    end
    table.foreach(_t, doT2S,0)
    szRet = szRet .. "}"
    return szRet
end


--切割字符串
local function split(str, splitChar)
    local subStrTab = {};
    while true do
        local pos = string.find(str, splitChar);
        if (not pos) then
            subStrTab[#subStrTab + 1] = str;
            break;
        end
        local subStr = string.sub(str, 1, pos - 1);
        subStrTab[#subStrTab + 1] = subStr;
        str = string.sub(str, pos + 1, #str);
    end
    return subStrTab;
end

local function format_root_str(root_config)
    local RootConfig = 
"       root =\n"
.."     {\n"

    for i  = 1 , #root_config do

        local one_attri =
"           {\n"
.."             name = '%s',\n"
.."             expr = %d,\n"
.."             coin = %d,\n"
.."             attri = %s,\n"
.."         },\n"

        local one_attri_str = string.format(one_attri,root_config[i].name ,
                                                     root_config[i].expr or 0, 
                                                     root_config[i].coin or 0,
                                                     sz_T2S(root_config[i].attri) )
        RootConfig = RootConfig.."\n"..one_attri_str.."\n"
    end
    RootConfig = RootConfig.."     }\n"
    return RootConfig
end

local function format_map_str(map_config)
    local MapConfig = 
" {\n"
.."     moneyType = "..map_config.moneyType.." ,\n"
.."     name = ".."'"..map_config.name.."' ,\n"
..format_root_str(map_config.root)
.." },\n\n"
    return MapConfig
end

 
local function format_star_str(star_config)
    local StarConfig = 
"Roots =\n"
.."{\n"

    for i , value in ipairs(star_config) do
        StarConfig = StarConfig..format_map_str(value)
    end
StarConfig = StarConfig
.."}\n"
    return StarConfig
end


function ReadStar()
    local objexcel = CExcelReader:new()
    if not objexcel then
        print("objexcel is null")
        return
    end
    print("start1")
    objexcel:Init_App()
    objexcel:OpenRead()
    print("start2")
    local obj = objexcel:LoadSheetByIndex(1)
    print("start3")
    if not obj then
        print("LoadSheetByIndex失败!")
        objexcel:Close()
        objexcel:Quit_App()
        return
    end
    local nCount = objexcel:GetCurrentSheetColCount()
    local mCount = objexcel:GetCurrentSheetRowCount()


    print("nCount", nCount)
    print("mCount", mCount)

    local Roots = {}

    for i = 2, mCount do
        local MapIndex = tonumber(objexcel:ReadCellAsString(i, 1))
        if nil == Roots[MapIndex] then
            Roots[MapIndex] = {moneyType = 1, root = {}}
        end
        local currMap = Roots[MapIndex]
        local MapName = tostring(objexcel:ReadCellAsString(i, 3))
        currMap.name = MapName

        local StarIndex = tonumber(objexcel:ReadCellAsString(i, 2))
        currMap.root[StarIndex] = {}
        local currStar =  currMap.root[StarIndex]
        currStar.name = tostring(objexcel:ReadCellAsString(i, 4))

        currStar.coin = tonumber(objexcel:ReadCellAsString(i, 5)) or 0
        currStar.expr = tonumber(objexcel:ReadCellAsString(i, 6)) or 0

        currStar.attri = {}
        
        --生命 17
        --灵力 19
        --攻击 27
        --物理防御 23
        --道法防御 33
        --命中 39
        --闪避 37
        --暴击 35
        --抗暴 25
        --会心 63

        --伤害加成 41
        --物理减伤 51
        --道法减伤 49

        local attriTypeInt = {17,19,27,23,33,39,37,35,25,63}
        local attriTypeDouble = {41,51,49,}
        for j  , tp in ipairs(attriTypeInt) do
            local currValue = tonumber(objexcel:ReadCellAsString(i, 6 + j)) or 0
            table.insert(currStar.attri , {type = tp , value =  currValue})
        end

        for j  , tp in ipairs(attriTypeDouble) do
            local currValue = (objexcel:ReadCellAsDouble(i, 16 + j)) or 0
            table.insert(currStar.attri , {type = tp , value =  currValue})
        end

    end




    --local temp = {Roots = Roots}
    local str = '--StarMap_config\n--#include '..'"..\\..\\language\\langCode.txt" once\n\n'..format_star_str(Roots)
    objexcel:WriteFile("data/config/roots/roots.txt",str)

    --print("here9")
    --local str = format_vip_str(VIPConfig)
    --print("here10")
    --写文件
    --[[
    writeConfig(itemfile, str)
    --print("here11")
    objexcel:WriteFile("roots.txt",str)
    print("here12")
    print(str)
    --]]

    objexcel:Close()
    objexcel:Quit_App()
    objexcel:delete()


end