--#include "data\config\globalconfig.txt" once
local NOERR             =  0    -- 无异常
local ERR_SQL           = -1    -- sql错误
local ERR_SESS          = -2    -- 用户没登陆
local ERR_GAMESER       = -3    -- 游戏服务没准备好
local ERR_DATASAVE      = -4    -- 角色上一次保存数据是否出现异常
local ERR_SELACTOR      = -5    -- 客户端选择角色的常规错误
local ERR_SAMENAME      = -6    -- 角色名重复
local ERR_NOUSER        = -7    -- 角色不存在
local ERR_SEX           = -8    -- 错误的性别
local ERR_NORANDOMNAME  = -9    -- 随机生成的名字已经分配完
local ERR_ZY            = -10   -- 客户端上传的角色阵营参数错误
local ERR_JOB           = -11   -- 客户端上传的角色职业参数错误
local ERR_NAME          = -12   -- 名称无效，名称中包含非法字符或长度不合法
local ERR_GUID          = -13   -- 如果玩家是帮主，不能删除该角色，需要玩家退帮

local cLoginKey         = 1
local sLoginKey         = 1
local cCreateActor      = 2
local sCreateActor      = 2
local cDelete           = 3
local sDelete           = 3
local cQueryList        = 4
local sQueryList        = 4
local cEnterGame        = 5
local sEnterGame        = 5
local cRandName         = 6
local sRandName         = 6
local cLessJob          = 7
local sLessJob          = 7
local cLessCamp         = 8
local sLessCamp         = 8

local t = {}

function t.queryActorCount(accountid, serverid)
    local ret = 0
    local db = LActorMgr.getDbConn()
    local sql = string.format("select count(*) from actors where accountid=%d and serverindex=%d", accountid, serverid)
    local err = System.dbQuery(db, sql)
    if err ~= 0 then
        return 0
    end

    local row = System.dbCurrentRow(db)
    if row == nil then
        ret = 2
    else
        ret = tonumber(System.dbGetRow(row, 0))
    end
    System.dbResetQuery(db)
    return ret
end

function t.queryZyList(serverid)
    local ret = 7
    local db = LActorMgr.getDbConn()
    local sql = string.format("call queryzylist(%d)", serverid)
    local err = System.dbQuery(db, sql)
    if err ~= 0 then
        return ret
    end
    local row = System.dbCurrentRow(db)
    if row ~= nil then
        for i = 0, 2 do
            local t = tonumber(System.dbGetRow(row, i))
            if t == 0 then
                local tmp = System.bitOpRig(1, i)
                tmp = System.bitOpNot(tmp)
                ret = System.bitOpAnd(ret, tmp)
            end
        end
    end
    System.dbResetQuery(db)
    return ret
end

function t.onQueryActorList(accountname, serverid)
    local updateactorlogin = "call updateactorlogin('%s', '%d')"

    if accountname == nil then return end
    local db = LActorMgr.getDbConn()
    if db == nil then return end
    local sql = string.format(updateactorlogin, accountname, serverid)
    local err = System.dbQuery(db, sql)
    if err ~= 0 then
        print("sql query error:"..sql)
        return
    end
    local row = System.dbCurrentRow(db)
    row = System.dbGetRow(row, 0)
    local ret = tonumber(row)
    System.dbResetQuery(db)
end

function t.queryLessJobDb(serverid)
    local getlessjob = "call getlessjob(%d)"
    local db = LActorMgr.getDbConn()
    local sql = string.format(getlessjob, serverid)
    local err = System.dbQuery(db, sql)
    if err ~= 0 then
        return -1
    end
    local row = System.dbCurrentRow(db)
    local job = 0
    if row == nil then
        job = 1
    else
        job = tonumber(System.dbGetRow(row, 0))
    end
    System.dbResetQuery(db)
    return 0, job
end

function t.userSelCharEntryGame(serverid, actorid, accountname, accountid, netid)
    local db = LActorMgr.getDbConn()
    local sql = string.format("call clientstartplay(%d,%d,'%s',%d,%f);", serverid, actorid, accountname, accountid, LActorMgr.getActorIp(netid))
    local err = System.dbQuery(db, sql)
    if err ~= 0 then
        print("选择角色错误!")
        return ERR_SELACTOR
    end
    local row = System.dbCurrentRow(db)
    if row ~= nil and tonumber(System.dbGetRow(row, 0)) ~= 0 then
        err = NOERR
    else
        err = ERR_NOUSER
    end
    System.dbResetQuery(db)
    return err
end

function t.queryDbZY(serverid)
    local camp = 1
    local db = LActorMgr.getDbConn()
    local sql = string.format("select zy from zycount where serverindex=%d order by usercount asc limit 1", serverid)
    local err = System.dbQuery(db, sql)
    if err ~= 0 then
        return -1, 0
    end
    local row = System.dbCurrentRow(db)
    if row ~= nil then
        camp = tonumber(System.dbGetRow(row, 0))
    end
    System.dbResetQuery(db)
    return 0, camp
end

t[cLoginKey] = nil

t[cCreateActor] = function (dp, serverid, accountid, accountname, actorid, netid, gateuser)
    local ret = 0
    local sex, job, icon, camp, pf, pfid

    local name = LDataPack.readString(dp)
    name = LActorMgr.lowerCaseNameStr(name)
    local nameLen = System.getStrLenUtf8(name)
    if nameLen <= 0 or nameLen > 6 or not LActorMgr.checkNameStr(name) then
        ret = ERR_NAME
    elseif LActorMgr.nameHasUser(name) then
        ret = ERR_SAMENAME
    elseif tonumber(name) then
        ret = ERR_NAME
    else
        sex = LDataPack.readChar(dp)
        job = LDataPack.readChar(dp)
        icon = LDataPack.readChar(dp)
        camp = LDataPack.readChar(dp)
        -- 没有阵营
        camp = zyXY
        pf = LDataPack.readString(dp)

        if camp < 0 or camp >= enMaxVocCount then
            ret = ERR_ZY
        end

        if camp == 0 then
            ret, camp = t.queryDbZY(serverid)
        end

        if job <= enVocNone or job >= enMaxVocCount then
            ret = ERR_JOB
        end

        --判断职业是否合法(1、刘秀 2、阴丽华 4、郭圣通)
        local ttjob = {[1]=true, [2]=true, [4]=true}
        --print("===============job"..job)
        if not ttjob[job] then
            ret = ERR_JOB
        end

        if sex ~= 0 and sex ~= 1 then
            ret = ERR_SEX
        end

        --判断性别(job,sex)(1,0)(2,1)(4,1)
        if job == 1 then
            sex = 0
        elseif job == 2 then
            sex = 1
        elseif job == 4 then
            sex = 1
        end

        if pf ~= nil then
            pfid = GlobalConfig.pfList[pf]
        end
        if pfid == nil then
            pfid = 0
        end
    end

    if ret ~= NOERR then
        local senddp = LActorMgr.getDataPacket()
        LDataPack.writeByte(senddp, 255)
        LDataPack.writeByte(senddp, sCreateActor)
        LDataPack.writeInt(senddp, 0)
        LDataPack.writeByte(senddp, ret)
        LDataPack.writeInt(senddp, 0)
        LActorMgr.SendToGate(netid, senddp)
        return
    end
    local aid = 0
    local atime = 0
    ret, aid, atime = LActorMgr.createActor(accountid, accountname, name, sex, job, icon, camp, aid, atime, pfid, gateuser)

    --print("角色ID: "..aid)
    --print("创角时间: "..atime)

    if ret == NOERR then
        local senddp = LActorMgr.getDataPacket()
        LDataPack.writeByte(senddp, 255)
        LDataPack.writeByte(senddp, sCreateActor)
        LDataPack.writeInt(senddp, aid)
        LDataPack.writeByte(senddp, ret)
        LDataPack.writeInt(senddp, atime)
        LActorMgr.SendToGate(netid, senddp)
        System.logCounter(accountid, accountname, "1", "role_choice", "", "", camp, job, sex)
    end
end

t[cDelete] = function (dp, serverid, accountid, accountname, actorid, netid)
    local senddp = LActorMgr.getDataPacket()
    LDataPack.writeByte(senddp, 255)
    LDataPack.writeByte(senddp, sDelete)
    if accountid == 0 then
        print("未发送查询包就开始删除角色!")
        LDataPack.writeInt(senddp, 0)
        LDataPack.writeChar(senddp, ERR_SESS)
        LActorMgr.SendToGate(netid, senddp)
        return
    end

    local aid = LDataPack.readInt(dp)
    LDataPack.writeInt(senddp, aid)
    local db = LActorMgr.getDbConn()
    local social_sql = string.format("call getactorssocial(%d)", aid)
    local err = System.dbQuery(db, social_sql)
    if err ~= 0 then
        return -1
    end
    local row = System.dbCurrentRow(db)
    local social = 0
    if row ~= nil then
        social = tonumber(System.dbGetRow(row, 0))
    end
    System.dbResetQuery(db)
    if social == smGuildLeader then
        print("您是宗主，解散玩帮派，才能删除!")
        LDataPack.writeChar(senddp, ERR_GUID)
        LActorMgr.SendToGate(netid, senddp)
        return
    end
    local sql = string.format("call clientdeletecharactor(%d,'%s')", aid, accountname)
    local err = System.dbQuery(db, sql)
    if err ~= 0 then
        LDataPack.writeChar(senddp, ERR_SQL)
    else
        LDataPack.writeChar(senddp, 0)
    end
    LActorMgr.SendToGate(netid, senddp)
end

t[cQueryList] = function (dp, serverid, accountid, accountname, actorid, netid)
    if accountid == 0 then
        print("user has not login, recv a query request")
        return
    end

    local loadactorlistbyaccountid = "call loadactorlistbyaccountid('%s','%d')"
    local sql = string.format(loadactorlistbyaccountid, accountname, serverid)
    local db = LActorMgr.getDbConn()
    local err = System.dbQuery(db, sql)
    local senddp = LActorMgr.getDataPacket()
    LDataPack.writeByte(senddp, 255)
    LDataPack.writeByte(senddp, sQueryList)
    LDataPack.writeInt(senddp, accountid)

    if err ~= 0 then
        LDataPack.writeChar(senddp, -1)
        LActorMgr.SendToGate(netid, senddp)
        return
    end

    local lastActor, idx = 0, 0
    local row = System.dbCurrentRow(db)
    local count = System.dbGetRowCount(db)
    LDataPack.writeChar(senddp, count)
    for i = 1, count do
        LDataPack.writeInt(senddp, tonumber(System.dbGetRow(row, 0)))
        LDataPack.writeString(senddp, System.dbGetRow(row, 1))
        LDataPack.writeByte(senddp, System.dbGetRow(row, 2))
        LDataPack.writeByte(senddp, System.dbGetRow(row, 3))
        LDataPack.writeByte(senddp, System.dbGetRow(row, 4))
        LDataPack.writeByte(senddp, System.dbGetRow(row, 5))

        local status = System.dbGetRow(row, 7)
        LDataPack.writeByte(senddp, System.dbGetRow(row, 8))
        LDataPack.writeInt(senddp, tonumber(System.dbGetRow(row, 9)))
        LDataPack.writeInt(senddp, tonumber(System.dbGetRow(row, 10))) --角色创建时间(新增)

        row = System.dbNextRow(db)

        local tmp = System.bitOpRig(status, 2)
        status = System.bitOpAnd(tmp, 1)
        if status == 1 then
            lastActor = idx
        end
        idx = idx + 1
    end

    System.dbResetQuery(db)

    LDataPack.writeByte(senddp, lastActor)

    local ret, job = t.queryLessJobDb(serverid)
    LDataPack.writeByte(senddp, job)

    count = t.queryActorCount(accountid, serverid)
    if count <= 0 then
        LDataPack.writeWord(senddp, 0)
    else
        local list = t.queryZyList(serverid)
        LDataPack.writeWord(senddp, list)
    end

    LActorMgr.SendToGate(netid, senddp)

    t.onQueryActorList(accountname, serverid)
end

t[cEnterGame] = function (dp, serverid, accountid, accountname, actorid, netid, gateuser)
    local senddp = LActorMgr.getDataPacket()
    LDataPack.writeByte(senddp, 255)
    LDataPack.writeByte(senddp, sEnterGame)
    if accountid == 0 then
        print("未登录就发送进入游戏包!")
        LDataPack.writeByte(senddp, ERR_SESS)
        LActorMgr.SendToGate(netid, senddp)
        return
    end
    actorid = LDataPack.readInt(dp)
    local x = LDataPack.readInt(dp)
    local y = LDataPack.readInt(dp)
    local pf = LDataPack.readString(dp)
    local err = t.userSelCharEntryGame(serverid, actorid, accountname, accountid, netid)
    LDataPack.writeByte(senddp, err)
    LActorMgr.SendToGate(netid, senddp)
    if err == NOERR then
        local pfid = nil
        if pf ~= nil then
            pfid = GlobalConfig.pfList[pf]
        end
        if pfid == nil then
            pfid = 0
        end
        LActorMgr.enterGame(gateuser, actorid, x, y, pfid)
    end
end

t[cRandName] = function (dp, serverid, accountid, accountname, actorid, netid, gateuser)
    local senddp = LActorMgr.getDataPacket()
    LDataPack.writeByte(senddp, 255)
    LDataPack.writeByte(senddp, sRandName)

    local sex = LDataPack.readByte(dp)
    local err = NOERR
    local actorname = ""
    if accountid == 0 then
        err = ERR_SESS
    else
        local maxWhileNum = 100
        local loopNum = 0
        while true do
            actorname = LActorMgr.getRandomName(sex)
            if actorname == nil then
                err = ERR_NORANDOMNAME
                break
            end
            local used = LActorMgr.nameHasUser(actorname)
            if not used then
                local len = System.getStrLenUtf8(actorname)
                if len <= 0 or len > 7 or not LActorMgr.checkNameStr(actorname) then
                else
                    break
                end
            end
            loopNum = loopNum + 1
            if loopNum >= maxWhileNum then
                err = ERR_NORANDOMNAME
                break
            end
        end
    end

    LDataPack.writeByte(senddp, err)
    if err == NOERR then
        LDataPack.writeByte(senddp, sex)
        LDataPack.writeString(senddp, actorname)
    end
    LActorMgr.SendToGate(netid, senddp)
end

t[cLessJob] = function (dp, serverid, accountid, accountname, actorid, netid, gateuser)
    local senddp = LActorMgr.getDataPacket()
    LDataPack.writeByte(senddp, 255)
    LDataPack.writeByte(senddp, sLessJob)
    if accountid == 0 then
        LDataPack.writeByte(senddp, ERR_SESS)
    else
        local ret, job = t.queryLessJobDb(serverid)
        LDataPack.writeByte(senddp, ret)
        LDataPack.writeByte(senddp, job)
    end
    LActorMgr.SendToGate(netid, senddp)
end

t[cLessCamp] = function (dp, serverid, accountid, accountname, actorid, netid, gateuser)
    local senddp = LActorMgr.getDataPacket()
    LDataPack.writeByte(senddp, 255)
    LDataPack.writeByte(senddp, sLessCamp)
    if accountid == 0 then
        LDataPack.writeByte(senddp, ERR_SESS)
    else
        local ret, camp = t.queryDbZY(serverid)
        LDataPack.writeByte(senddp, ret)
        LDataPack.writeByte(senddp, camp)
    end
    LActorMgr.SendToGate(netid, senddp)
end

function actorMgrEvent(cmd, dp, serverid, accountid, accountname, actorid, netid, gateuser)
    if t[cmd] and type(t[cmd] == "function") then
        t[cmd](dp, serverid, accountid, accountname, actorid, netid, gateuser)
    end
end