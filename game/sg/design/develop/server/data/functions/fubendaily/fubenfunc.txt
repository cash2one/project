--[[
副本相关操作
这里规划出副本的常规操作
1.进入副本
2.副本刷怪
3.副本单只怪物死亡
4.副本当前场景怪物死亡
5.结算
]]--

--#include "fubenconf.txt"

local Protocol = {
	FubendailySystemId = 42,

	sCancelEnter = 3,
	sTurnoverData = 4,
	sRewardData = 5,
}

local RewardType = {
	EXP = 1,
	MONEY = 2,
}

local FubenDailyFunc = {}
local FubenTeam = {}
local FubenDifficulty = {}

function FubenDailyFunc.GetFubenCount(sysarg,fubenId)
	local var = LActor.getStaticVar(sysarg)

	--副本次数数据
	if var.fubenCount == nil then
		var.fubenCount = {}
	end 
	if var.fubenCount[fubenId] == nil then
		var.fubenCount[fubenId] = 0    --说明通关0次
	end

	return var.fubenCount[fubenId]
end

function FubenDailyFunc.CancelEnterFuben(sysarg,fubenName)
	--玩家取消进入
	local actors = LuaHelp.getTeamMemberListByPtr(sysarg)
	--1.通知队伍其他玩家，谁谁谁拒绝进入副本
	for i = 1,table.getn(actors) do
		local actor = actors[i]
		local tips = string.format(Lang.ScriptTips.fubenfunc001,LActor.getName(sysarg),fubenName)
		LActor.sendTipmsg(sysarg, tips, ttMessage)
	end
	local teamId = LActor.getTeamId(sysarg)
	FubenTeam[teamId] = nil
	--2.发送取消进入副本的消息
	local npack = DataPack.allocPacket(sysarg,Protocol.FubendailySystemId,Protocol.sCancelEnter)
	if npack == nil then return end
	DataPack.flush(npack)
end

function FubenDailyFunc.EnterFuben(sysarg,fubenId)
	local actors = LuaHelp.getTeamMemberList(sysarg)
	local hFuben = Fuben.createFuBen(fubenId)
	FubenDifficulty[hFuben] = difId
	FubenDailyFunc.InitFuben(hFuben)
	--1.通知队伍其他玩家，谁谁谁拒绝进入副本
	for i = 1,table.getn(actors) do
		local actor = actors[i]
		LActor.enterFuBen( actor, hFuben, FubenConfig[fubenId].sceneId, FubenConfig[fubenId].posX, FubenConfig[fubenId].posY )
		--记录玩家的经验
		local var_d = LActor.getDyanmicVar(sysarg)
		if var_d.fubenReward == nil then
			var_d.fubenReward = {} 
		end  
		var_d.fubenReward.startExp = LActor.getIntProperty(sysarg,PROP_ACTOR_EXP)
	end
end

function FubenDailyFunc.ReqEnterFuben(sysarg,fubenId,difId,flag)
	if FubenFunc[fubenId] == nil then
		return 
	end

	if FubenFunc[fubenId].ReqEnterFuben ~= nil then
		if FubenFunc[fubenId].ReqEnterFuben(sysarg,fubenId,difId,flag) then
			return
		end 
	end

	--请求进入副本
	local teamId = LActor.getTeamId(sysarg)
	if not teamId or teamId <= 0 then --说明只有自己
		local hFuben = Fuben.createFuBen(fubenId)
		FubenDifficulty[hFuben] = difId
		FubenDailyFunc.InitFuben(hFuben)
		LActor.enterFuBen( sysarg, hFuben, FubenConfig[fubenId].sceneId, FubenConfig[fubenId].posX, FubenConfig[fubenId].posY )
		--记录玩家的经验
		local var_d = LActor.getDyanmicVar(sysarg)
		if var_d.fubenReward == nil then
			var_d.fubenReward = {} 
		end  
		var_d.fubenReward.startExp = LActor.getIntProperty(sysarg,PROP_ACTOR_EXP)
	else --说明是有队伍的
		if FubenTeam[teamId] == nil then
			FubenTeam[teamId] = {}
		end
		if flag == 1 then
			local actorId = LActor.getActorId(sysarg)
			local hasActor = false
			for i=1,#FubenTeam[teamId] do
				if FubenTeam[teamId][i] == actorId then
					hasActor = true
					break 
				end
			end
			if hasActor == false then
				table.insert(FubenTeam[teamId],actorId)
			end
			 
			local teamCount = LActor.getTeamMemberCount(sysarg)
			if #FubenTeam[teamId] >= teamCount then
				FubenDailyFunc.EnterFuben(sysarg,fubenId,difId)
			end
		else
			--说明有人不同意，那么立即取消进入
			FubenDailyFunc.CancelEnterFuben(sysarg)
		end
	end
end

function FubenDailyFunc.InitFuben(hFuben)  
	if FubenFunc[fubenId] == nil then
		return 
	end

	if FubenFunc[fubenId].InitFuben ~= nil then
		if FubenFunc[fubenId].InitFuben(hFuben) then
			return
		end 
	end

	local fubenId = LActor.getFubenId(sysarg)
	--重置副本时间
	if FubenConfig[fubenId] == nil then
		return 
	end
	local limitTime = FubenConfig[fubenId].limitTime
	if limitTime ~= nil then
		Fuben.SetFubenTime(hFuben,limitTime)
	end

	return 
end

function FubenDailyFunc.CreateMonsters(sysarg,fubenId,hScene,nIndex)	
	if FubenConfig[fubenId] == nil then
		return 
	end

	if FubenConfig[fubenId].monsters == nil then
		return 
	end

	local monsterList = FubenConfig[fubenId].monsters[nIndex]
	if monsterList == nil then
		return 
	end
	for k , v in pairs (monsterList) do	
		Fuben.createMonsters(hScene, v.monsterId, v.posX1, v.posX2, v.posY1, v.posY2, v.nCount,0)
		--注册怪物死亡事件
		MonDieDispatcher.register( v.monsterId,  FubenDailyFunc.OnMonsterDie)
	end
end

function FubenDailyFunc.MonsterCreate(sysarg,nIndex)
	local fubenId = LActor.getFubenId(sysarg)
	local hFuben = LActor.getFubenHandle(sysarg)
	local difId = FubenDifficulty[hFuben]
	if difId == nil then
		difId = 1  --默认为简单
	end
	if FubenFunc[fubenId] == nil then
		return 
	end

	if FubenFunc[fubenId].MonsterCreate ~= nil then
		if FubenFunc[fubenId].MonsterCreate(difId,nIndex) then
			return
		end 
	end

	--默认创建方法是根据序号进行怪物创建
	local hScene = LActor.getSceneHandle(sysarg)
	FubenDailyFunc.CreateMonsters(sysarg,fubenId,hScene,nIndex)
	return
end

function FubenDailyFunc.OnMonsterDie(monster,sysarg,monId)
	local fubenId = LActor.getFubenId(sysarg)
	if FubenFunc[fubenId] == nil then
		return 
	end

	if FubenFunc[fubenId].OnMonsterDie == nil then
		if FubenFunc[fubenId].OnMonsterDie(monster,sysarg,monId) then
			return
		end 
	end
	return
end

function FubenDailyFunc.OnMonsterAllDie(sceneId, scenePtr, flag, monster)
	local fubenId = LActor.getFubenId(sysarg)
	if FubenFunc[fubenId] == nil then
		return 
	end

	if FubenFunc[fubenId].OnMonsterAllDie == nil then
		if FubenFunc[fubenId].OnMonsterAllDie(sceneId, scenePtr, flag, monster) then
		 	return
		 end 
	end

	--所有怪物死亡的通用处理
	--默认是进行结算
	FubenDailyFunc.OnResult(sysarg)
	return
end

--给玩家发送翻牌数据
function FubenDailyFunc.SendTurnover(sysarg,fubenId)
	--翻牌
	local tResualt = {}
	if FubenConfig[fubenId] == nil then
		return 
	end
	if FubenConfig[fubenId].turnoverReward == nil then
		return 
	end
	local truenConf = FubenConfig[fubenId].turnoverReward

	for i=1,3 do
		local randomNum = System.getRandomNumber(100)
		local tmp = 0
		for k,v in pairs(truenConf) do
			local per = v.probability*100
			tmp = tmp + per
			if tmp > randomNum then
				table.insert(tResualt,v)
				break
			end
		end
	end
	
	if #tResualt ~= 3 then
		return 
	end

	--发送数据给客户端
	local npack = DataPack.allocPacket(sysarg,Protocol.FubendailySystemId,Protocol.sTurnoverData)
	if npack == nil then return end
	for k,v in pairs(tResualt) do
		DataPack.writeInt( npack, v.itemid )
		DataPack.writeInt( npack, v.count )
	end
	DataPack.flush(npack)
end

--给玩家发送奖励列表
function FubenDailyFunc.SendRewardList(sysarg)
	--玩家奖励怎么保存呢？用玩家自己的var保存
	local var_d = LActor.getDyanmicVar(sysarg)
	if var_d.fubenReward == nil then
		return 
	end        
	if var_d.fubenReward == nil then
		var_d.fubenReward = {} 
	end  
	if var_d.fubenReward.rewardList == nil then
		var_d.fubenReward.rewardList = {}
	end
	local curExp = LActor.getIntProperty(sysarg,PROP_ACTOR_EXP)
	if var_d.fubenReward.startExp == nil then
		var_d.fubenReward.startExp = curExp - 99 
	end
	local difExp = curExp - var_d.fubenReward.startExp 
	local lenTmp = #var_d.fubenReward.rewardList + 1
	var_d.fubenReward.rewardList[lenTmp] = {0,RewardType.EXP,difExp}  --此处要定义一下当类型为1时

	if var_d.fubenReward == nil then
		var_d.fubenReward = {} 
	end  
	if var_d.fubenReward.itemMap == nil then
		var_d.fubenReward.itemMap = {}
	end

	for k,v in pairs(var_d.fubenReward.itemMap) do
		local lenTmp = #var_d.fubenReward.rewardList + 1
		if k == 0 then
			var_d.fubenReward.rewardList[lenTmp] = {0,RewardType.MONEY,v}  
		else 
			var_d.fubenReward.rewardList[lenTmp] = {1,k,v} 
		end
	end
	--发送数据给客户端
	local npack = DataPack.allocPacket(sysarg,Protocol.FubendailySystemId,Protocol.sRewardData)
	if npack == nil then return end
	for k,v in pairs(var_d.fubenReward) do
		DataPack.writeInt( npack, v[1] )  --类型
		DataPack.writeInt( npack, v[2] )  --id
		DataPack.writeInt( npack, v[3] )  --数量
	end
	DataPack.flush(npack)
end

function FubenDailyFunc.OnResult(sysarg)
	local fubenId = LActor.getFubenId(sysarg)
	if FubenFunc[fubenId] == nil then
		return 
	end

	if FubenFunc[fubenId].OnResult ~= nil then
		if FubenFunc[fubenId].OnResult(sysarg) then
			return
		end
	end

	--根据配置表进行处理
	if FubenConfig[fubenId] == nil then
		return 
	end
	if FubenConfig[fubenId].isTurnover then  --判断是否需要翻牌
		FubenDailyFunc.SendTurnover(sysarg)
	end
	FubenDailyFunc.SendRewardList(sysarg)
	return
end

function FubenDailyFunc.OnExit(sysarg)
	local fubenId = LActor.getFubenId(sysarg)
	if FubenFunc[fubenId] == nil then
		return 
	end

	if FubenFunc[fubenId].OnExit ~= nil then
		if FubenFunc[fubenId].OnExit(sysarg) then
			return 
		end
	end

	--结算
	FubenDailyFunc.OnResult(sysarg)
	return
end

function FubenDailyFunc.LootItem(sysarg,itemId,itemCount)
	local var_d = LActor.getDyanmicVar(sysarg)
	if var_d.fubenReward == nil then
		var_d.fubenReward = {} 
	end  
	if var_d.fubenReward.itemMap == nil then
		var_d.fubenReward.itemMap = {}
	end
	if var_d.fubenReward.itemMap[itemId] == nil then
		var_d.fubenReward.itemMap[itemId] = 0
	end

	var_d.fubenReward.itemMap[itemId] = var_d.fubenReward.itemMap[itemId] + itemCount
end

--事件
function EventCallDispatcher.HandlerLotteryOp(sysarg, args)
	local itemId = args[1]
	local itemCount = args[4]

	FubenDailyFunc.LootItem(sysarg,itemId,itemCount)
end
EventCallDispatcher.registerEventCall(BaseTypes.ActorEventId.aeActorLootItem, EventCallDispatcher.HandlerLotteryOp)

function GmEventFuncList.FubenDailyFunc(sysarg, args)
	local gmIndex = tonumber(args[1])
	if gmIndex == 1 then   		--进入副本
		local fubenId = tonumber(args[2])
		local flag = tonumber(args[3])
		local difId = tonumber(args[4])
		print(string.format("enterfuben : %d ====  %d ===== %d",gmIndex,fubenId,flag))
		FubenDailyFunc.ReqEnterFuben(sysarg,fubenId,difId,flag)
	elseif gmIndex == 2 then	--创建怪物
		local nIndex = tonumber(args[2])
		print(string.format("createmonster : %d",nIndex))
		FubenDailyFunc.MonsterCreate(sysarg,nIndex)
	elseif gmIndex == 3 then
		print(string.format("OnExit =========="))
		FubenDailyFunc.OnExit(sysarg)
	end	
end

GmEventFuncList.register( "fubendaily", GmEventFuncList.FubenDailyFunc, 1)
