--在线送天珠系统中于登录登出相关联的事件处理

--#include "TimeMoneyReward_Const.txt" once 

--在线送天珠奖励
--登录处理  --登录由客户端请求 不发送信息 
EventCallDispatcher._NoviceLoginMoneyReward = function ( sysarg )
  --print("----new day")
	if LocalDT.TimeMoneyRewardConst ~= nil then timeReward = LocalDT.TimeMoneyRewardConst else return end
	if LocalDT.WeekTimeMoneyRewardConst ~= nil then WeektimeReward = LocalDT.WeekTimeMoneyRewardConst else return end
  --[[
  local level = LActor.getIntProperty( sysarg, PROP_LEVEL )
  if ( level < timeReward.REWARDLIMLEVEL[1] ) then return end          --领取最低等级限制
  if ( level > timeReward.REWARDLIMLEVEL[2] ) then return end          --领取最高等级限制
  ]]
  --获取当前的mini时间，单位秒
	local time = System.getCurrMiniTime()

	local var = LActor.getStaticVar( sysarg )       --获得上次剩余的在线奖励记录
  
	local nLast = LActor.getLastLogoutTime(sysarg)	--上次下线的时间

	--print("var.getlogoutExp1"..var.getlogoutExp)
	if var.getlogoutExp == nil then --离线经验的计算 
	--print ("isnil")
		var.getlogoutExp = 0
		--print("var.getlogoutExp1"..var.getlogoutExp)
	end

	if var.getlogoutRoot == nil then
		var.getlogoutRoot = 0
	end

	--print("var.getlogoutExp2"..var.getlogoutExp)
	if (nLast == 0) then	--第一次登录
		var.getlogoutExp = 0
		var.getlogoutRoot = 0
	else
		--if var.getlogoutExp == nil then
			--print("isnile2")
		--end
		--print("var.getlogoutExp3"..var.getlogoutExp)
		var.getlogoutExp = var.getlogoutExp + (time - nLast)
		--非正常退出有负数
		if var.getlogoutExp < 0 then
			var.getlogoutExp = 0
		end
		--if var.getlogoutExp == nil then
			--print("isnile3")
		--end
		--print("var.getlogoutExp4"..var.getlogoutExp)
		local maxlogoutexp = 168*3600
		if var.getlogoutExp > maxlogoutexp then
			var.getlogoutExp = maxlogoutexp
		end

		var.getlogoutRoot = var.getlogoutRoot + (time - nLast)
		--非正常退出有负数
		if var.getlogoutRoot < 0 then
			var.getlogoutRoot = 0
		end
		local maxlogoutroot = 168*3600
		if var.getlogoutRoot > maxlogoutroot then
			var.getlogoutRoot = maxlogoutroot
		end
	end 
  
	--print ("var.getlogoutExp5 " ..var.getlogoutExp )
	local timeMoneyReward = var.timeMoneyReward	   --在线领取绑定天珠静态变量
	local WeektimeMoneyReward = var.WeektimeMoneyReward 
  
 
  --如果不存在领取绑定天珠在线数据，则初始化
	if ( timeMoneyReward == nil ) then
		var.timeMoneyReward = {}
		timeMoneyReward = var.timeMoneyReward
		timeMoneyReward[1] = 0  --在线累计时间
		timeMoneyReward[2] = 0  --在线累计金钱
		timeMoneyReward[3] = time  --记录登录初始时间
		timeMoneyReward[4] = 0  --记录领取累计时间
		timeMoneyReward[5] = time  --记录时间用于判断隔天
	end
	
	if timeMoneyReward[1] == nil then
		timeMoneyReward[1] = 0
	end
	
	if timeMoneyReward[2] == nil then
		timeMoneyReward[2] = 0
	end
  --记录初始时间 如果为空 则赋予当前登录时间，否则 初始时间推移到上次下线时累计时间
	if timeMoneyReward[3] == nil then
		timeMoneyReward[3] = time
	else
		timeMoneyReward[3] = tonumber(time - timeMoneyReward[1])
	end
	
	if timeMoneyReward[4] == nil then
		timeMoneyReward[4] = 0  --记录领取当天总累计时间
	end
	
	if timeMoneyReward[5] == nil then
		timeMoneyReward[5] = time  --记录时间用于判断隔天
	end
  --print(timeMoneyReward[5])
  --print(time)
  --用前一次记录的mini时间与当前登录的mini时间相对比是否为同一天
	if ( math.floor(timeMoneyReward[5]/timeReward.DAYTIME) ~= math.floor(time/timeReward.DAYTIME) ) then
    --print("next day -------")
		timeMoneyReward[1] = 0  --在线累计时间
		timeMoneyReward[2] = 0  --在线累计金钱
		timeMoneyReward[3] = time  --记录登录初始时间
		timeMoneyReward[4] = 0  --记录领取当天总累计时间
		timeMoneyReward[5] = time  --记录时间用于判断隔天
	end

  
   --如果不存在领取绑定天珠在线数据，则初始化
	if ( WeektimeMoneyReward == nil ) then
		var.WeektimeMoneyReward = {}
		WeektimeMoneyReward = var.WeektimeMoneyReward
		WeektimeMoneyReward[1] = 0  --在线累计时间
		WeektimeMoneyReward[2] = time  --记录登录初始时间
		WeektimeMoneyReward[3] = false  --
	end

	if WeektimeMoneyReward[1] == nil then
		WeektimeMoneyReward[1] = 0
	end
	
	if WeektimeMoneyReward[2] == nil then
		WeektimeMoneyReward[2] = time
	else
		WeektimeMoneyReward[2] = tonumber(time - WeektimeMoneyReward[1])
	end
  --记录初始时间 如果为空 则赋予当前登录时间，否则 初始时间推移到上次下线时累计时间
	if WeektimeMoneyReward[3] == nil then
		WeektimeMoneyReward[3] = false
	end

  --判断是否同一周,判断最后登出时间是否上一周或上几周,是就要设置WeektimeMoneyReward[3] = false
  --print(timeMoneyReward[5])
  --print(time)
  --用前一次记录的mini时间与当前登录的mini时间相对比是否为同一天
  --是否本周,是本周不用清零,不是本周要清零
	local bsameweek = System.isSameWeek_new(nLast,time)
	if ( bsameweek == false ) then
    --print("next day -------")
		WeektimeMoneyReward[1] = 0  --在线累计时间
		WeektimeMoneyReward[2] = time  --在线累计金钱
		WeektimeMoneyReward[3] = false  --记录登录初始时间
	
	end
  --[[ --登录由客户端请求 
	--服务端返回在线信息
	local npack = DataPack.allocPacket(sysarg,138,2)  --申请一个数据包
	if (npack == nil) then
		--print("npack:nil")
		return
	end

   
  DataPack.writeUInt(npack,timeReward.REWARDLIMITTIME)    --一天能换取天珠的总时间
  DataPack.writeUInt(npack,timeReward.REWARDMONEY)    --单位时间能换取的天珠数
  DataPack.writeUInt(npack,timeMoneyReward[4])    --已换取天珠的时间
  DataPack.writeUInt(npack,timeMoneyReward[1])  --累计未换取天珠的时间
  DataPack.writeUInt(npack,timeReward.REWARDTIME)    --每次领取天珠所需时间间隔数
	DataPack.flush(npack)   --发送数据包
  ]]
end

--跨日处理  --跨日由服务端自动下发
EventCallDispatcher._NewDayMoneyReward = function ( sysarg ,arg)

	if LocalDT.TimeMoneyRewardConst ~= nil then timeReward = LocalDT.TimeMoneyRewardConst else return end
	if LocalDT.WeekTimeMoneyRewardConst ~= nil then WeektimeReward = LocalDT.WeekTimeMoneyRewardConst else return end
  --[[
  local level = LActor.getIntProperty( sysarg, PROP_LEVEL )
  if ( level < timeReward.REWARDLIMLEVEL[1] ) then return end          --领取最低等级限制
  if ( level > timeReward.REWARDLIMLEVEL[2] ) then return end          --领取最高等级限制
  ]]
  --获取当前的mini时间，单位秒
  local islogin = arg[1]
	local time = System.getCurrMiniTime()

	local var = LActor.getStaticVar( sysarg )       --获得上次剩余的在线奖励记录
  
	local timeMoneyReward = var.timeMoneyReward	   --在线领取绑定天珠静态变量
	local WeektimeMoneyReward = var.WeektimeMoneyReward
  --如果不存在领取绑定天珠在线数据，则初始化
	if ( timeMoneyReward == nil ) then
		var.timeMoneyReward = {}
		timeMoneyReward = var.timeMoneyReward
		timeMoneyReward[1] = 0  --在线累计时间
		timeMoneyReward[2] = 0  --在线累计金钱
		timeMoneyReward[3] = time  --记录登录初始时间
		timeMoneyReward[4] = 0  --记录领取累计时间
		timeMoneyReward[5] = time  --记录时间用于判断隔天
	end

	if timeMoneyReward[1] == nil then
 	  timeMoneyReward[1] = 0
 	end
 	if timeMoneyReward[2] == nil then
		timeMoneyReward[2] = 0
	end
  --记录初始时间 如果为空 则赋予当前登录时间，否则 初始时间推移到上次下线时累计时间
	if timeMoneyReward[3] == nil then
		timeMoneyReward[3] = time
	else
		timeMoneyReward[3] = tonumber(time - timeMoneyReward[1])
	end
	if timeMoneyReward[4] == nil then
		timeMoneyReward[4] = 0  --记录领取当天总累计时间
	end
	if timeMoneyReward[5] == nil then
		timeMoneyReward[5] = time  --记录时间用于判断隔天
	end
  --print(timeMoneyReward[5])
  --print(time)
  --用前一次记录的mini时间与当前登录的mini时间相对比是否为同一天
	if ( math.floor(timeMoneyReward[5]/timeReward.DAYTIME) ~= math.floor(time/timeReward.DAYTIME) ) then
    --print("next day -------")
		timeMoneyReward[1] = 0  --在线累计时间
		timeMoneyReward[2] = 0  --在线累计金钱
		timeMoneyReward[3] = time  --记录登录初始时间
		timeMoneyReward[4] = 0  --记录领取当天总累计时间
		timeMoneyReward[5] = time  --记录时间用于判断隔天
	end


	--服务端返回在线信息 --跨日由服务端自动下发 
	


	
	if ( WeektimeMoneyReward == nil ) then
		var.WeektimeMoneyReward = {}
		WeektimeMoneyReward = var.WeektimeMoneyReward
		WeektimeMoneyReward[1] = 0  --在线累计时间
		WeektimeMoneyReward[2] = time  --在线累计金钱
		WeektimeMoneyReward[3] = false  --记录登录初始时间
	end

	if WeektimeMoneyReward[1] == nil then
		WeektimeMoneyReward[1] = 0
 	end
	
 	if WeektimeMoneyReward[3] == nil then
		WeektimeMoneyReward[3] = false
	end
  --记录初始时间 如果为空 则赋予当前登录时间，否则 初始时间推移到上次下线时累计时间
	if WeektimeMoneyReward[2] == nil then
		WeektimeMoneyReward[2] = time
	else
		WeektimeMoneyReward[2] = tonumber(time - WeektimeMoneyReward[1])
	end
 
  --print(timeMoneyReward[5])
  --print(time)
  --用前一次记录的mini时间与当前登录的mini时间相对比是否为同一周
  --是否周一
	local curday = System.getDayOfWeek()
  --if ( math.floor(WeektimeMoneyReward[5]/WeektimeReward.DAYTIME) ~= math.floor(time/WeektimeReward.DAYTIME) ) then
	if curday == 0 then --周日清了
  --print("next day -------")
		WeektimeMoneyReward[1] = 0  --在线累计时间
		WeektimeMoneyReward[2] = time  --在线累计金钱
		WeektimeMoneyReward[3] = false  --记录登录初始时间
	end
	

 
end 

--在线送天珠奖励的情况的下线存储
--下线处理 
EventCallDispatcher._LogoutRecordMoneyAwardTime = function ( sysarg )
	if LocalDT.TimeMoneyRewardConst ~= nil then timeReward = LocalDT.TimeMoneyRewardConst else return end
	if LocalDT.WeekTimeMoneyRewardConst ~= nil then WeektimeReward = LocalDT.WeekTimeMoneyRewardConst else return end
  --[[
  local level = LActor.getIntProperty( sysarg, PROP_LEVEL )
  if ( level < timeReward.REWARDLIMLEVEL[1] ) then return end          --领取最低等级限制
  if ( level > timeReward.REWARDLIMLEVEL[2] ) then return end          --领取最高等级限制
  ]]
	local time = System.getCurrMiniTime()
	local timeMoneyReward = LActor.getStaticVar( sysarg ).timeMoneyReward	--获得上次剩余的在线奖励记录
	if timeMoneyReward ~= nil then
	  --记录累计的奖励时间供下次上线用
		--timeMoneyReward[3] = time - 90*3600 --测试
		if (time - timeMoneyReward[3]) <= 0 then
			timeMoneyReward[1] = 0
		else
			timeMoneyReward[1] = tonumber(time - timeMoneyReward[3])
		end
		timeMoneyReward[5] = time		--记录本次下线时间供下次上线用
	end
	local WeektimeMoneyReward = LActor.getStaticVar( sysarg ).WeektimeMoneyReward
	if WeektimeMoneyReward ~= nil then
	 --记录累计的奖励时间供下次上线用
		 --WeektimeMoneyReward[2] = time - 90*3600 --测试
		if (time - WeektimeMoneyReward[2]) <= 0 then
			WeektimeMoneyReward[1] = 0
		else
			WeektimeMoneyReward[1] = tonumber(time - WeektimeMoneyReward[2])
		end
	  
	end
end



EventCallDispatcher.registerEventCall(BaseTypes.ActorEventId.aeUserLogin, EventCallDispatcher._NoviceLoginMoneyReward)
EventCallDispatcher.registerEventCall(BaseTypes.ActorEventId.aeUserLogout, EventCallDispatcher._LogoutRecordMoneyAwardTime)
EventCallDispatcher.registerEventCall(BaseTypes.ActorEventId.aeNewDayArrive, EventCallDispatcher._NewDayMoneyReward)