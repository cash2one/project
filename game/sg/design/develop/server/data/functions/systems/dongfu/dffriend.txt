
-- 初始化好友集，在洞府主人登录时调用
DongfuManager.initFriendSet = function(ownerId, dfData)
	local pChar = LActor.getActorById(ownerId)
	local list = LActor.getFriendIdList(pChar) or {}
	dfData.friendSet = {}
	local friendSet = dfData.friendSet

	for _, id in ipairs(list) do
		-- 自己的好友集
		friendSet[id] = 1

		-- 注册进好友洞府的在线好友集
		DongfuManager.registerOlFriend(ownerId, id)
	end
end

DongfuManager.registerOlFriendAll = function(ownerId, dfData)
	local friendSet = dfData.friendSet
	for id in pairs(friendSet) do
		DongfuManager.registerOlFriend(ownerId, id)
	end
end

-- 初始化在线好友集，在洞府创建时调用
DongfuManager.initOlFriendSet = function(ownerId, dfData)
	if DongfuManager.__friendSet[ownerId] ~= nil then
		-- 获取在洞府创建前就已经登录了的好友集
		dfData.olFriendSet = DongfuManager.__friendSet[ownerId]
		DongfuManager.__friendSet[ownerId] = nil
	end
end

DongfuManager.onExitDongfu = function(cId)
	-- 不是洞府之间的跳转，需要设置好友状态
	local dfData = DongfuManager.getDongfuData(cId)
	if dfData ~= nil and dfData.friendSet ~= nil then
		for id in pairs(dfData.friendSet) do
			local fDfData = DongfuManager.getDongfuData(id)
			local fs
			if fDfData ~= nil then
				fs = fDfData.olFriendSet
			else
				fs = DongfuManager.__friendSet[id]
			end
			if fs ~= nil and fs[cId] ~= nil then
				fs[cId] = nil
			end
		end
	end
end

-- 自己在线，把自己注册进好友的洞府好友在线集
DongfuManager.registerOlFriend = function(id, fId)
	local fDfData = DongfuManager.getDongfuData(fId)
	if fDfData ~= nil then
		fDfData.olFriendSet[id] = 1
	else
		if DongfuManager.__friendSet[fId] == nil then
			DongfuManager.__friendSet[fId] = {}
		end
		DongfuManager.__friendSet[fId][id] = 1
	end
end

DongfuManager.onAddFriend = function(pChar, fId)
	local id = LActor.getActorId(pChar)
	local dfData = DongfuManager.getDongfuData(id)
	if dfData ~= nil then
		if dfData.friendSet ~= nil then
			-- 只有自己的好友集构建后，才需要加入新好友
			dfData.friendSet[fId] = 1
		end

		local var = LActor.getDyanmicVar(pChar)
		if var.dongfu_id ~= nil then
			-- 如果自己在洞府，需要加入到好友的洞府在线好友集
			DongfuManager.registerOlFriend(id, fId)

			--XXX 需要推送该好友的洞府状态
			local flags = DongfuManager.getStateFlag(pChar, fId)
			if flags ~= 0 then
				local dp = DataPack.allocPacket(pChar, 157, 22)
				DataPack.writeInt(dp, 1)
				DataPack.writeInt(dp, fId)
				DataPack.writeByte(dp, flags)
				DataPack.flush(dp)
			end
		end
	end
end

DongfuManager.onDelFriend = function(pChar, fId)
	local id = LActor.getActorId(pChar)
	local dfData = DongfuManager.getDongfuData(id)
	-- 删除好友，对方可能不在线，所以这个调用处理双方的好友集
	if dfData ~= nil then
		if dfData.friendSet ~= nil then
			dfData.friendSet[fId] = nil
		end
		dfData.olFriendSet[fId] = nil
	else
		local fs = DongfuManager.__friendSet[id]
		if fs ~= nil then
			fs[fId] = nil
		end
	end

	local fDfData = DongfuManager.getDongfuData(fId)
	if fDfData ~= nil then
		if fDfData.friendSet ~= nil then
			fDfData.friendSet[id] = nil
		end
		fDfData.olFriendSet[id] = nil
	else
		local fs = DongfuManager.__friendSet[fId]
		if fs ~= nil then
			fs[id] = nil
		end
	end

	-- 如果自己正好在这个好友洞府，退出并进入自己洞府
	local var = LActor.getDyanmicVar(pChar)
	if var.dongfu_id == fId then
		DongfuManager.enter(pChar, id)
	end
end