--昆仑神树的逻辑处理文件

--#include "data\functions\systems\timereward\magictreeconf.txt" once

MagicTreeFunc = {}

--请求收获日志
MagicTreeFunc.getGoldLog = function(sysarg, dp)
	local sysVar = System.getStaticVar() 
	if sysVar.magictree == nil then return end
	
	if sysVar.magictree.goldlog  == nil then
		sysVar.magictree.goldlog = {}
	end

	local log = sysVar.magictree.goldlog 

	local npack = DataPack.allocPacket(sysarg,MagicTreeProto.SYSId,MagicTreeProto.GOLDLOG)

	DataPack.writeInt(npack, #log)
	for i=1,#log do
		DataPack.writeString(npack, log[i])
	end

	DataPack.flush(npack)
end

--请求偷取浇水日志
MagicTreeFunc.getOperateLog = function(sysarg, dp)
	local sysVar = System.getStaticVar() 
	if sysVar.magictree == nil then return end
	local myId = LActor.getActorId(sysarg)
	local log = sysVar.magictree[myId].optlog

	local npack = DataPack.allocPacket(sysarg,MagicTreeProto.SYSId,MagicTreeProto.OPERATELOG)

	DataPack.writeInt(npack, #log)
	for i=1,#log do
		DataPack.writeString(npack, log[i])
	end

	DataPack.flush(npack)
end

--接口-获取好友是否可浇花，是否可偷果子
MagicTreeFunc.getFriendMsk = function(sysarg,fid)
	local isWater = 0
	local isSteal = 0

	local var = LActor.getStaticVar(sysarg)
	local sysVar = System.getStaticVar()
	if var.magictree == nil then return end

	local myId = LActor.getActorId(sysarg)
	local curTime = System.getCurrMiniTime()
	
	MagicTreeFunc.initUserData(myId)
	MagicTreeFunc.initUserData(fid)
	
	local treeInfo = sysVar.magictree[fid]
	if var.magictree.iswater == nil then var.magictree.iswater = MagicTreeConf.waterFriendCount end
	local waterTime = MagicTreeConf.waterTime - (curTime - treeInfo.watertime)
	if waterTime < 0 then waterTime = 0 end
	if waterTime == 0 and treeInfo.ripecell < MagicTreeConf.ripeCell then
		isWater = var.magictree.iswater
	end

	if var.magictree.issteal == nil then var.magictree.issteal = MagicTreeConf.stealFriendCount end
	if treeInfo.ripecell >= MagicTreeConf.ripeCell and  #treeInfo.fruitlist > 0 then
		isSteal = var.magictree.issteal
	end

	return isWater,isSteal
end

--请求好友列表(10条做分页)
MagicTreeFunc.getFriendList = function(sysarg, dp)
	local list = LActor.getFriendIdList(sysarg) or {}

	local npack = DataPack.allocPacket(sysarg,MagicTreeProto.SYSId,MagicTreeProto.FRIENDLIST)
	DataPack.writeInt(npack, #list)

	for _, id in ipairs(list) do
		local name = LActor.getFriendName(sysarg, id, 1)   -- 1ftFriend,2ftEnemy,3ftBlack,4ftLast
		local msk = 0
		local isWater,isSteal = MagicTreeFunc.getFriendMsk(sysarg,id)
		--print(string.format("********** %d %d",isWater,isSteal))
		if isWater > 0 then
			msk = System.bitOpSetMask(msk,0,true)
		end
		if isSteal > 0 then
			msk = System.bitOpSetMask(msk,1,true)
		end
		DataPack.writeString(npack,name)
		DataPack.writeChar(npack,msk)
		DataPack.writeInt(npack,id)
		--print(string.format("=====friend:  %s,  msk:  %d, id:  %d",name,msk,id))
	end

	DataPack.flush(npack)
end

--生成神果
MagicTreeFunc.createFruite = function(userId)
	local sysVar = System.getStaticVar()
	if sysVar.magictree == nil then
		return
	end
	MagicTreeFunc.initUserData(userId)

	local configCount = MagicTreeConf.fruitCount
	local configQuality = MagicTreeConf.fruitQuality 
	if sysVar.magictree[userId].isusekey then
		configCount = MagicTreeConf.fruitCount1key
		configQuality = MagicTreeConf.fruitQuality1key
	end

	local rsList = {}
	local count = System.getRandomNumber(configCount[2]-configCount[1]) + configCount[1]
	sysVar.magictree[userId].fruitlist = {}

	--print(string.format("======createFruite=====3===== (%d)",count))
	for i=1,count do
		local per = System.getRandomNumber(100)/100
		local tmp = 0
		local len = #sysVar.magictree[userId].fruitlist + 1
		--print(string.format("=======createFruite===2=== (%f,%d,%d)",per,len,i))
		for j=1,#configQuality do
			tmp = tmp + configQuality[j][2] 
			if tmp  > per then
				sysVar.magictree[userId].fruitlist[len] = {}
				sysVar.magictree[userId].fruitlist[len][1] = configQuality[j][1]
				sysVar.magictree[userId].fruitlist[len][2] = configQuality[j][3]
				sysVar.magictree[userId].fruitlist[len][3] = i
				tmp = -100
				--print(string.format("=====createFruite===== (%d,%d,%d)",sysVar.magictree[userId].fruitlist[len][1],sysVar.magictree[userId].fruitlist[len][2],sysVar.magictree[userId].fruitlist[len][3]))
			end
		end
	end

	--print(string.format("=========createFruite======4==%d===%d=",userId,#sysVar.magictree[userId].fruitlist))

end


--初始化
MagicTreeFunc.initUserData = function(userId)
	local curTime = System.getCurrMiniTime()
	local sysVar = System.getStaticVar()
	--print("====================initUserData================================")
	--print(string.format("userId:  %d",userId))
	-- 不存在数据，进行初始化
	if sysVar.magictree[userId] == nil then
		sysVar.magictree[userId] = {}
		sysVar.magictree[userId].ripecell = 0								-- 默认一格成熟度都没有
		sysVar.magictree[userId].watertime = curTime						-- 默认成熟时间为一个格子的倒计时
		sysVar.magictree[userId].fruitlist = {}								-- 默认成熟果子列表为空
		sysVar.magictree[userId].isusekey = 0								-- 默认是否使用一键成熟为否
		sysVar.magictree[userId].optlog = {}								-- 操作日志

		--print(string.format("==============initUserData============================ %d    %d",userId,#sysVar.magictree[userId].fruitlist))
	end 
end

MagicTreeFunc.userLog = function(userId,str)
	local sysVar = System.getStaticVar()
	if sysVar.magictree == nil then
		return
	end
	MagicTreeFunc.initUserData(userId)

	local len = #sysVar.magictree[userId].optlog + 1
	if len > MagicTreeConf.logAllCount then
		-- 删除第一条
		local tmpList = sysVar.magictree[userId].optlog
		local tmpList1 = {}
		for i=1,#tmpList do
			local len = #tmpList1 + 1
			if i>MagicTreeConf.friendCleanLog then
				tmpList1[len] = tmpList[i]
			end
		end

		sysVar.magictree[userId].optlog = {}
		for i=1,#tmpList1 do
			sysVar.magictree[userId].optlog[i] = tmpList1[i]
		end
	end
	local len = #sysVar.magictree[userId].optlog + 1
	sysVar.magictree[userId].optlog[len] = str
end

MagicTreeFunc.globalLog = function(str)
	local sysVar = System.getStaticVar()
	if sysVar.magictree == nil then
		return
	end
	if sysVar.magictree.goldlog == nil then
		sysVar.magictree.goldlog = {}
	end
	local goldLogLen = #sysVar.magictree.goldlog + 1
	if goldLogLen > MagicTreeConf.logAllCount then
		-- 删除第一条
		local tmpList = sysVar.magictree.goldlog
		local tmpList1 = {}
		for i=1,#tmpList do
			local len = #tmpList1 + 1
			if i>MagicTreeConf.allCleanLog then
				tmpList1[len] = tmpList[i]
			end
		end

		sysVar.magictree.goldlog = {}
		for i=1,#tmpList1 do
			sysVar.magictree.goldlog[i] = tmpList1[i]
		end
	end
	local goldLogLen = #sysVar.magictree.goldlog + 1
	sysVar.magictree.goldlog[goldLogLen] = str
end

--普通浇水/元宝浇水
MagicTreeFunc.waterTree = function(sysarg, dp)
	local sysVar = System.getStaticVar()
	if sysVar.magictree == nil then
		return
	end
	local userId = DataPack.readInt(dp) -- 被挑战者的ID
	local msk = DataPack.readInt(dp) 	-- 浇水的类型
	local myId = LActor.getActorId(sysarg)
	--print(string.format("==MagicTreeFunc== (%d,%d,%d)",userId,msk,myId))
	if userId == nil or myId == nil or userId == 0 then 
		return 
	end

	-- 不存在数据，进行初始化
	MagicTreeFunc.initUserData(userId) --初始化数据

	if sysVar.magictree[userId].ripecell >= MagicTreeConf.ripeCell then
		LActor.sendTipmsg(sysarg, Lang.ScriptTips.klss002, ttMessage)
		return
	end 

	if userId ~= myId then
		if not LActor.isFriend(sysarg, userId) then 
			LActor.sendTipmsg(sysarg, Lang.ScriptTips.klss003, ttMessage)
			return 
		end 

		local var = LActor.getStaticVar(sysarg)
		if var.magictree == nil then var.magictree = {} end

		if var.magictree.watered == nil then
			var.magictree.watered = {}
		end
		if var.magictree.watered[userId] == nil then
			var.magictree.watered[userId] = 0
		end
		if var.magictree.watered[userId] >= MagicTreeConf.waterFriendCount then
			LActor.sendTipmsg(sysarg, Lang.ScriptTips.klss010, ttMessage)
			return 
		end

		if var.magictree.allwatered == nil then
			var.magictree.allwatered = 0
		end
		if var.magictree.allwatered >= MagicTreeConf.waterFriendCount then
			LActor.sendTipmsg(sysarg, Lang.ScriptTips.klss012, ttMessage)
			return 
		end
		
		var.magictree.allwatered = var.magictree.allwatered + 1
	end

	local curTime = System.getCurrMiniTime()
	
	local treeInfo = sysVar.magictree[userId]
	local waterTime = MagicTreeConf.waterTime - (curTime - treeInfo.watertime)
	if userId == myId and waterTime > 0 then
		LActor.sendTipmsg(sysarg, Lang.ScriptTips.klss005, ttMessage)
		return 
	end

	if msk == 1 then
		-- 扣元宝
		local moneyType = MagicTreeConf.ripeCostWater[1]
		local moneyCount = MagicTreeConf.ripeCostWater[2]
		local hasMoneyCount = LActor.getMoneyCount( sysarg, MagicTreeConf.ripeCostWater[1] )
		if hasMoneyCount < MagicTreeConf.ripeCostWater[2] then
			local str = string.format(Lang.ScriptTips.klss014,MagicTreeConf.moneyType[moneyType]) 
			LActor.sendTipmsg(sysarg, str, ttMessage)
			return
		end 
		LActor.changeMoney(sysarg, moneyType, -moneyCount, 1, true, "watertree", "watertree")
	end
	sysVar.magictree[userId].ripecell = sysVar.magictree[userId].ripecell + 1
	if myId == userId then
		sysVar.magictree[userId].watertime = curTime
	end
	
	if sysVar.magictree[userId].ripecell == MagicTreeConf.showCell then
		-- 生成神果
		MagicTreeFunc.createFruite(userId)
		sysVar.magictree[userId].isusekey = 0
	end
	
	if userId ~= myId then
		local str = string.format(Lang.ScriptTips.klss001,LActor.getName(sysarg),1)
		--print(string.format("=========userId:  %d,   myId:  %d=====",userId,myId))
		MagicTreeFunc.userLog(userId,str)
		--print("============================over")
	else

	end

	LActor.sendTipmsg(sysarg, Lang.ScriptTips.klss004, ttMessage)
	MagicTreeFunc.getInfo1(sysarg,userId)
end

--一键成熟
MagicTreeFunc.ripeOneKey = function(sysarg, dp)
	local sysVar = System.getStaticVar()
	if sysVar.magictree == nil then
		return
	end
	local myId = LActor.getActorId(sysarg)

	-- 不存在数据，进行初始化
	MagicTreeFunc.initUserData(myId) --初始化数据
	
	if sysVar.magictree[myId].ripecell >= MagicTreeConf.ripeCell then
		LActor.sendTipmsg(sysarg, Lang.ScriptTips.klss017, ttMessage)
		return
	end 

	local restCell = MagicTreeConf.ripeCell - sysVar.magictree[myId].ripecell
	--print(string.format("======restCell:   %d",restCell))
	if restCell <= 0 then return end

	-- 扣元宝
	local moneyType = MagicTreeConf.ripeOneKey[MagicTreeConf.ripeOneKeyStyle][1]
	local moneyCount = nil
	if MagicTreeConf.ripeOneKeyStyle == 1 then
		moneyCount = MagicTreeConf.ripeOneKey[MagicTreeConf.ripeOneKeyStyle][2]
	elseif MagicTreeConf.ripeOneKeyStyle == 2 then
		moneyCount = MagicTreeConf.ripeOneKey[MagicTreeConf.ripeOneKeyStyle][2]*restCell
	end

	local hasMoneyCount = LActor.getMoneyCount( sysarg, moneyType )
	if hasMoneyCount < moneyCount then
		local str = string.format(Lang.ScriptTips.klss014,MagicTreeConf.moneyType[moneyType]) 
		LActor.sendTipmsg(sysarg, str, ttMessage)
		return
	end 
	LActor.changeMoney(sysarg, moneyType, -moneyCount, 1, true, "watertree", "watertree")

	-- 结果子
	local curTime = System.getCurrMiniTime()
	sysVar.magictree[myId].ripecell = MagicTreeConf.ripeCell
	sysVar.magictree[myId].watertime = curTime
	sysVar.magictree[myId].isusekey = 1

	MagicTreeFunc.createFruite(myId)		-- 创建果实
	sysVar.magictree[myId].isusekey = 0

	MagicTreeFunc.getInfo1(sysarg,myId)
end

--仓库
MagicTreeFunc.getStoreInfo = function(sysarg)
	local var = LActor.getStaticVar(sysarg)
	if var.magictree == nil then var.magictree = {} end

	if var.magictree.store == nil then
		var.magictree.store = {}
	end

	local store = var.magictree.store

	local npack = DataPack.allocPacket(sysarg,MagicTreeProto.SYSId,MagicTreeProto.STOREINFO)
	local itemCount = LActor.getItemCount( sysarg, MagicTreeConf.bornItem )
	DataPack.writeInt(npack, itemCount)
	
	local storeCount = 0
	for i=1,#store do
		if store[i] ~= nil then
			storeCount = storeCount + 1
		end
	end
	DataPack.writeInt(npack, storeCount)

	for i=1,#store do
		if store[i] ~= nil then
			local id = store[i][1]
			local count = store[i][2]
			local index = store[i][3]
			DataPack.writeInt(npack, id)
			DataPack.writeInt(npack, count)
			DataPack.writeInt(npack, index)
			--print(string.format("==getStoreInfo==(%d,%d,%d)",id,count,index))
		end
	end
	
	DataPack.flush(npack)
end

MagicTreeFunc.remove = function(userId,index)
	local sysVar = System.getStaticVar()
	if sysVar.magictree == nil then
		return
	end
	local tmpList = sysVar.magictree[userId].fruitlist
	local tmpList1 = {}
	
	--print(string.format("====remove=======%d,%d",#sysVar.magictree[userId].fruitlist,index))
	for i=1,#tmpList do
		local len = #tmpList1 + 1
		if tmpList[i][3] ~= index then
			tmpList1[len] = {}
			tmpList1[len][1] = tmpList[i][1]
			tmpList1[len][2] = tmpList[i][2]
			tmpList1[len][3] = tmpList[i][3]
			--print(string.format("=1====%d=",i))
		end
	end

	sysVar.magictree[userId].fruitlist = {}
	for i=1,#tmpList1 do
		sysVar.magictree[userId].fruitlist[i] = {}
		sysVar.magictree[userId].fruitlist[i][1] = tmpList1[i][1]
		sysVar.magictree[userId].fruitlist[i][2] = tmpList1[i][2]
		sysVar.magictree[userId].fruitlist[i][3] = tmpList1[i][3]
		--print(string.format("=2====%d----(%d,%d,%d)",i,tmpList1[i][1],tmpList1[i][2],tmpList1[i][3]))
	end

	--print(string.format("====remove=======%d",#sysVar.magictree[userId].fruitlist))
end

--偷果/摘果子
MagicTreeFunc.takeFruit = function(sysarg,dp)
	local userId = DataPack.readInt(dp) -- 摘取的玩家ID
	local index = DataPack.readInt(dp) -- 摘取的果实类型
	local myId = LActor.getActorId(sysarg)

	--print(string.format("=======userId:  %d, index:  %d",userId,index))
	local sysVar = System.getStaticVar()
	if sysVar.magictree == nil then
		return
	end
	local var = LActor.getStaticVar(sysarg)

	MagicTreeFunc.initUserData(userId)
	MagicTreeFunc.initUserData(myId)

	if var.magictree == nil then
		var.magictree = {}
	end
	if var.magictree.store == nil then
		var.magictree.store = {}
	end

	local msk = 0
	for i=1, #sysVar.magictree[userId].fruitlist do
		if sysVar.magictree[userId].fruitlist[i][3] == index then

			if myId ~= userId then
				local var = LActor.getStaticVar(sysarg)
				if var.magictree == nil then var.magictree = {} end
				if var.magictree.stealed == nil then
					var.magictree.stealed = {}
				end
				if var.magictree.stealed[userId] == nil then
					var.magictree.stealed[userId] = 0
				end
				if var.magictree.stealed[userId] >= MagicTreeConf.stealFriendCount then
					LActor.sendTipmsg(sysarg, Lang.ScriptTips.klss011, ttMessage)
					return 
				end

				if var.magictree.allstealed == nil then
					var.magictree.allstealed = 0
				end
				if var.magictree.allstealed >= MagicTreeConf.waterFriendCount then
					LActor.sendTipmsg(sysarg, Lang.ScriptTips.klss013, ttMessage)
					return 
				end
			end

			local findOut = 0

			local itemId = sysVar.magictree[userId].fruitlist[i][1]
			local itemCount = sysVar.magictree[userId].fruitlist[i][2]

			--for j=1,MagicTreeConf.storeCell do
			--	if findOut == 0 and var.magictree.store[j] == nil  then
			--		var.magictree.store[j] = {}
			--		var.magictree.store[j][1] = itemId
			--		var.magictree.store[j][2] = itemCount
			--		var.magictree.store[j][3] = j
			--		findOut = 1
			--	end
			--end

			-- 打开果实
			local rs = MagicTreeFunc.useItemReal(sysarg,itemId,itemCount)
			if rs ~= 1 then		-- 打开果实失败
				return 
			end
			--print("==========================rs:::: 1")
			--if rs == 1 then		--使用成功
			--	-- 删除背包中的数据
			--	MagicTreeFunc.removeItem(sysarg,index)
			--	MagicTreeFunc.getStoreInfo(sysarg,packet)
			--	return
			--end

			--if findOut ~= 1  then
			--	-- 仓库满了
			--	LActor.sendTipmsg(sysarg, Lang.ScriptTips.klss009, ttMessage)
			--	return
			--end

			if myId ~= userId then
				var.magictree.stealed[userId] = var.magictree.stealed[userId] + 1
				var.magictree.allstealed = var.magictree.allstealed + 1

				local str = string.format(Lang.ScriptTips.klss006,LActor.getName(sysarg),Item.getItemName(itemId))
				MagicTreeFunc.userLog(userId,str)
			end

			--print(string.format("====takeFruit======(%d,%d)",itemId,itemCount))
			
			local str = string.format(Lang.ScriptTips.klss007,Item.getItemName(itemId))
			MagicTreeFunc.userLog(myId,str)

			for i=1,#MagicTreeConf.logItem do
				--print(string.format("===takeFruit==(%d,%d)",MagicTreeConf.logItem[i],itemId))
				if MagicTreeConf.logItem[i] == itemId then
					local str = string.format(Lang.ScriptTips.klss008,LActor.getName(sysarg),Item.getItemName(itemId))
					MagicTreeFunc.globalLog(str)
				end
			end
			msk = 1
		end
	end

	-- 清除数据
	if msk == 1 then
		MagicTreeFunc.remove(userId,index)
	end

	if #sysVar.magictree[userId].fruitlist <= 0 then
		--print("=======tree has empt")
		local curTime = System.getCurrMiniTime()
		sysVar.magictree[userId].ripecell = 0								-- 默认一格成熟度都没有
		sysVar.magictree[userId].watertime = curTime						-- 默认成熟时间为一个格子的倒计时
		sysVar.magictree[userId].fruitlist = {}								-- 默认成熟果子列表为空
		sysVar.magictree[userId].isusekey = 0								-- 默认是否使用一键成熟为否
	end

	MagicTreeFunc.getInfo1(sysarg,userId)
end 

MagicTreeFunc.getInfo = function(sysarg, dp)
	local userId = DataPack.readInt(dp) -- 被挑战者的ID
	MagicTreeFunc.getInfo1(sysarg,userId)
end

--获取树的信息
MagicTreeFunc.getInfo1 = function(sysarg, userId)
	local myId = LActor.getActorId(sysarg)
	--print(string.format("===MagicTreeFunc==(%d,%d)",userId,myId))
	if userId == nil or myId == nil then 
		return 
	end

	local userName = nil
	if myId == userId then
		userName = LActor.getName(sysarg)
	else
		userName = LActor.getFriendName(sysarg, userId, 1)   -- 1ftFriend,2ftEnemy,3ftBlack,4ftLast
	end	 
	--print(string.format("username:  %s",userName))
	if userName == nil then return end

	MagicTreeFunc.initUserData(userId)
	MagicTreeFunc.initUserData(myId)

	local sysVar = System.getStaticVar() 
	if sysVar.magictree == nil then return end
	
	local treeInfo = sysVar.magictree[userId]

	local ripeCell = treeInfo.ripecell  
	local curTime = System.getCurrMiniTime()
	local waterTime = MagicTreeConf.waterTime - (curTime - treeInfo.watertime)
	if userId ~= myId or waterTime < 0 then waterTime = 0 end

	--print(string.format("================###=(%d,%d,%d)",userId,myId,waterTime))

	local fruitList = treeInfo.fruitlist
	local isUseKey = treeInfo.isusekey

	--print(string.format("======*===createFruite========%d===%d=",userId,#sysVar.magictree[userId].fruitlist))

	local npack = DataPack.allocPacket(sysarg,MagicTreeProto.SYSId,MagicTreeProto.TREEINFO)

	DataPack.writeInt(npack, userId)
	DataPack.writeString(npack, userName)
	DataPack.writeInt(npack, ripeCell)
	DataPack.writeInt(npack, waterTime)
	local len = 0
	if fruitList ~= nil then
		len = #fruitList
	end
	DataPack.writeInt(npack, len)

	for i=1,len do
		DataPack.writeInt(npack, fruitList[i][1])
		DataPack.writeInt(npack, fruitList[i][2])
		DataPack.writeInt(npack, fruitList[i][3])
	end

	--print(string.format("=====(%d,%s,%d,%d,%d)",userId,userName,ripeCell,waterTime,len))
	DataPack.flush(npack)
end

MagicTreeFunc.PlayItemEffect = function(sysarg,itemId,itemCount)
	-- 播放特效
   	local effects = {}
	local effect = {}
	effect.type = 1  -- 1为物品,暂时只支持发物品所以写死
    effect.id = itemId
    effect.count = itemCount
    effects[#effects+1] = effect
		if #effects > 0 then
		MiscFunc.PlayItemEffect(sysarg, 11, effects)
	end
end



MagicTreeFunc.useItemReal = function(sysarg,id,count)
	--print(string.format("id:  %d, count: %d",id,count))
	local var = LActor.getStaticVar(sysarg)
	for i=1,#MagicTreeConf.useItem do
		--print(string.format("=======userItem:   %d",MagicTreeConf.useItem[i]))
		if MagicTreeConf.useItem[i] == id then
			local moneyType = MagicTreeConf.useItemCost[i][1]
			local moneyCount = MagicTreeConf.useItemCost[i][2]*count
			local hasMoneyCount = LActor.getMoneyCount( sysarg, moneyType )
			--print(string.format("moneyType:  %d, moneyCount: %d, hasMoneyCount: %d",moneyType,moneyCount,hasMoneyCount))
			if hasMoneyCount < moneyCount then
				--print("===================="..Lang.ScriptTips.klss014)
				local str = string.format(Lang.ScriptTips.klss014,MagicTreeConf.moneyType[moneyType]) 
				LActor.sendTipmsg(sysarg, str, ttMessage)
				return 0
			end 
			--开宝箱
			local per = System.getRandomNumber(100)
			local tmp = 0
			local itemId = 0
			local itemCount = 0
			for i=1,#MagicTreeConf.bornBox[id] do
				tmp = tmp + MagicTreeConf.bornBox[id][i][2]
				if tmp > per then
					itemId = MagicTreeConf.bornBox[id][i][1]
					itemCount = MagicTreeConf.bornBox[id][i][3] * count
				end
			end
			--print(string.format("====bag====(%d,%d)",itemId,itemCount))
			if not LActor.canAddItem(sysarg, itemId, itemCount, 0, 0, true) then
				--print("===================="..Lang.ScriptTips.klss016)
				-- LActor.sendTipmsg( sysarg, Lang.ScriptTips.klss016,ttMessage )
				LActor.SendGeneralTips(sysarg, 7, 0, 0)
				return 0
			end

			
			--LActor.addItem(sysarg,itemId,0,0,itemCount,1,"useitemtree",1)
			-- 给物品，放到仓库里面去
			local findOut = 0
			for j=1,MagicTreeConf.storeCell do
				if findOut == 0 and var.magictree.store[j] ~= nil then
					if var.magictree.store[j][1] == itemId and var.magictree.store[j][2] < MagicTreeConf.itemStackCount then
						var.magictree.store[j][2] = var.magictree.store[j][2] + itemCount
						findOut = 1
					end
				end
			end

			if findOut ~= 1 then
				for j=1,MagicTreeConf.storeCell do
					if findOut == 0 and var.magictree.store[j] == nil  then
						var.magictree.store[j] = {}
						var.magictree.store[j][1] = itemId
						var.magictree.store[j][2] = itemCount
						var.magictree.store[j][3] = j
						findOut = 1
					end
				end
			end

			if findOut ~= 1  then
				-- 仓库满了
				LActor.sendTipmsg(sysarg, Lang.ScriptTips.klss009, ttMessage)
				return
			end

			LActor.changeMoney(sysarg, moneyType, -moneyCount, 1, true, "useitemtree", "useitemtree")
			MagicTreeFunc.PlayItemEffect(sysarg,itemId,itemCount)

			local intCount = MagicTreeConf.bornInt[id]
			-- 给积分物品
			LActor.addItem(sysarg,MagicTreeConf.bornItem,0,0,intCount,1,"useitemtree",1)
			MagicTreeFunc.PlayItemEffect(sysarg,MagicTreeConf.bornItem,intCount)

			return 1
		end
	end

	return 0
end

MagicTreeFunc.removeItem = function(sysarg,index)
	local var = LActor.getStaticVar(sysarg)
	var.magictree.store[index] = nil
end
	
MagicTreeFunc.useItem = function(sysarg, packet)
	local index = DataPack.readInt(packet) -- 物品的序列号
	local var = LActor.getStaticVar(sysarg)
	if var.magictree == nil then var.magictree = {} end

	if var.magictree.store == nil then
		var.magictree.store = {}
	end

	--print(string.format("********index: %d",index))
	local store = var.magictree.store
	for i=1,#store do
		if store[i] ~= nil then
			local id = store[i][1]
			local count = store[i][2]
			local idx = store[i][3]
			--print(string.format("%d -----------  %d",index,idx))
			if index == idx then
				-- 使用物品
				local rs = MagicTreeFunc.useItemReal(sysarg,id,count)
				--print("==========================rs:::: 1")
				if rs == 1 then		--使用成功
					--print("==========================rs:::: 2")
					-- 删除背包中的数据
					MagicTreeFunc.removeItem(sysarg,index)
					MagicTreeFunc.getStoreInfo(sysarg,packet)
					return
				end
			end
		end
	end

	-- 提示物品使用失败
	--LActor.sendTipmsg(sysarg, Lang.ScriptTips.klss015, ttMessage)
end 

--把物品移到背包里面
MagicTreeFunc.clearUp = function(sysarg)
	local var = LActor.getStaticVar(sysarg)
	local store = var.magictree.store
	if store == nil then
		return
	end
	for i=1,#store do
		if store[i] ~= nil then
			local itemId = store[i][1]
			local itemCount = store[i][2]
			local index = store[i][3]
			
			if not LActor.canAddItem(sysarg, itemId, itemCount, 0, 0, true) then
				--print("===================="..Lang.ScriptTips.klss016)
				-- LActor.sendTipmsg( sysarg, Lang.ScriptTips.klss016,ttMessage )
				LActor.SendGeneralTips(sysarg, 7, 0, 0)
				return 0
			end

			LActor.addItem(sysarg,itemId,0,0,itemCount,1,"magicTree",1)
			MagicTreeFunc.PlayItemEffect(sysarg,itemId,itemCount)
			var.magictree.store[i] = nil
			--print(string.format("==getStoreInfo==(%d,%d,%d)",id,count,index))
			MagicTreeFunc.getStoreInfo(sysarg)
		end
	end
end
-- 将单个物品放入背包
MagicTreeFunc.clearSingle = function(sysarg,packet) 
	local index = DataPack.readInt(packet) -- 物品的序列号
	local var = LActor.getStaticVar(sysarg)
	local store = var.magictree.store

	if store[index] ~= nil then
		local itemId = store[index][1]
		local itemCount = store[index][2]
		local index = store[index][3]
		
		if not LActor.canAddItem(sysarg, itemId, itemCount, 0, 0, true) then
			--print("===================="..Lang.ScriptTips.klss016)
			-- LActor.sendTipmsg( sysarg, Lang.ScriptTips.klss016,ttMessage )
			LActor.SendGeneralTips(sysarg, 7, 0, 0)
			return 0
		end

		LActor.addItem(sysarg,itemId,0,0,itemCount,1,"magicTree",1)
		MagicTreeFunc.PlayItemEffect(sysarg,itemId,itemCount)
		var.magictree.store[index] = nil  -- 删除仓库物品
		--print(string.format("==getStoreInfo==(%d,%d,%d)",id,count,index))
		MagicTreeFunc.getStoreInfo(sysarg)
	end

end

--下一轮成熟
MagicTreeFunc.nextRipe = function(sysarg)
	local sysVar = System.getStaticVar()
	if sysVar.magictree == nil then
		return
	end
	local myId = LActor.getActorId(sysarg)

	local curTime = System.getCurrMiniTime()
	sysVar.magictree[myId].ripecell = 0								-- 默认一格成熟度都没有
	sysVar.magictree[myId].watertime = curTime						-- 默认成熟时间为一个格子的倒计时
	sysVar.magictree[myId].fruitlist = {}								-- 默认成熟果子列表为空
	sysVar.magictree[myId].isusekey = 0								-- 默认是否使用一键成熟为否

	MagicTreeFunc.getInfo1(sysarg,myId)
end

--初始化
MagicTreeFunc.init = function()
	--print("=====MagicTreeFunc.init")
	local sysVar = System.getStaticVar() --全局数据，保存在文件中
	if sysVar ~= nil then
		sysVar.magictree = {}  --保存所有的神树数据
	end
end

--清除数据
MagicTreeFunc.cleanAllData = function()
	--print("=====MagicTreeFunc.cleanData")
	local sysVar = System.getStaticVar() --全局数据，保存在文件中
	if sysVar ~= nil then
		sysVar.magictree = nil  --清除所有数据
	end
end

--清除某一个玩家的数据
MagicTreeFunc.cleanData = function(userId)
	--print("=====MagicTreeFunc.cleanData")
	local sysVar = System.getStaticVar() --全局数据，保存在文件中
	if sysVar ~= nil and sysVar.magictree ~= nil then
		sysVar.magictree[userId] = nil
	end
end


--协议解析
MagicTreeFunc.operator = function(sysarg, systemid, msgid, packet)
	--print("==================MagicTreeFunc=============================")
	--print(string.format("MagicTreeFunc====(%d,%d)",systemid,msgid))
	if msgid == 1 then 			-- 获取神树信息
		MagicTreeFunc.getInfo(sysarg, packet)
	elseif msgid == 2 then 		-- 获取收获日志
		MagicTreeFunc.getGoldLog(sysarg, packet)
	elseif msgid == 3 then 		-- 获取仓库信息
		MagicTreeFunc.getStoreInfo(sysarg)
	elseif msgid == 4 then 		-- 获取好友列表
		MagicTreeFunc.getFriendList(sysarg, packet)
	elseif msgid == 5 then 		-- 获取操作日志
		MagicTreeFunc.getOperateLog(sysarg, packet)
	elseif msgid == 6 then 		-- 浇水
		MagicTreeFunc.waterTree(sysarg, packet)
	elseif msgid == 7 then 		-- 摘果子
		MagicTreeFunc.takeFruit(sysarg, packet)
	elseif msgid == 8 then 		-- 一键催熟
		MagicTreeFunc.ripeOneKey(sysarg, packet)
	elseif msgid == 9 then 		-- 使用物品
		MagicTreeFunc.useItem(sysarg, packet)
	elseif msgid == 10 then		-- 放到背包里面
		MagicTreeFunc.clearUp(sysarg) 
	elseif msgid == 11 then		-- 下一轮成熟
		MagicTreeFunc.nextRipe(sysarg) 
	elseif msgid == 12 then		-- 下一轮成熟
		MagicTreeFunc.clearSingle(sysarg,packet) 
	end
	--print("=============================================================")
end

--新的一天到来
MagicTreeFunc.NewDayAcrrive = function( sysarg, arg )
	local var = LActor.getStaticVar( sysarg )
	if var == nil then return end
	var.magictree = {}
	var.magictree.watered = nil
	var.magictree.allwatered = nil
	var.magictree.stealed = nil
	var.magictree.allstealed = nil
end

table.insert(InitFnTable,MagicTreeFunc.init)
--SystemHandlerDispatcher.registerSystemHander(BaseTypes.SystemId.magicTree, MagicTreeFunc.operator)

EventCallDispatcher.registerEventCall(BaseTypes.ActorEventId.aeNewDayArrive, MagicTreeFunc.NewDayAcrrive)

--测试
MagicTreeFunc.test = function(sysarg,dp)
	--print("====MagicTreeFunc.test")
	--MagicTreeFunc.ripeOneKey(sysarg,dp)
	--print("======================")
end
