--按总概率的方式配置物品

--添加配置
--#include "../../config/item/scriptItemConfig/ProabilityItem.txt" once




--[[
--按照总概率Roll物品 
--sysarg:实体的指针
--itemidx: 物品的ID
--itemPtr: 物品的指针
--ItemTable: 配置的参数列表，如果单独调用的话，这里是需要背包格子的数量 
--]]
function ProbablityItemFunc(sysarg,itemidx,itemPtr,ItemTable) 
 
  if(itemidx == nil) then 
    System.trace ("ProbablityItemFunc itemidx ==nil")
    return 
  end
  --print ("ProbablityItemFunc"..itemidx)
  --获取玩家目前有多少个空格子，如果格子不够，就返回 
  local config =ItemTable
  if(config == nil) then 
    System.trace("ProbablityItemFunc config is nill")
    return 
  end
  
  --玩家身上的背包格子 
  local count = Item.getBagEmptyGridCount(sysarg)
  local needGridCount=1   --需要背包格子的数量 
  if( config.needMinBagGrid ~= nil) then
     needGridCount =   config.needMinBagGrid 
  end
 
  if needGridCount and count < needGridCount then
    local tipMsg = string.format(Lang.ScriptTips.x00074,needGridCount)
    LActor.sendTipmsg( sysarg,tipMsg,ttDialog )
    return false
  end

   
  --判断物品需要消耗的数目
  local nNeedItemCount = ItemTable.itemCount
  if(nNeedItemCount == nil) then 
      nNeedItemCount =1 
  end
  if( LActor.getItemCount(sysarg,itemidx,-1,-1) < nNeedItemCount) then
    local tipMsg = string.format(Lang.ScriptTips.x00140,nNeedItemCount)
    LActor.sendTipmsg( sysarg,tipMsg,ttDialog )
	return false
  end
  
  
   --需要roll一个物品
  local dropName = "proability"..tostring(itemidx) --按名字索引的
  local drop = System.getObjectVar(dropName)
  if (not drop) then
    System.trace("getObjectVar is nil"..itemidx)
		return
  end
  
  
    --如果需要删除物品的话就删除
  if(config.needDelete and (LActor.removeItem(sysarg,itemidx,nNeedItemCount,-1,-1,-1,"Roll",2) ~=nNeedItemCount) ) then --删除物品失败 
    return false
  end
  --[[
   这段代码是用来发公告的tips的，但是测试有问题，暂时留着 
    Item.addItem(sysarg,itemPtr,"roll",1,items.itemList[i].btCount)
          if(items.itemList[i].btAuxParam ==1)  then
             local itemDes = Item.getItemLinkMsg(items.itemList[i].wItemId,itemPtr)
	           local tipMsg = string.format(Lang.ScriptTips.x00085,LActor.getName(sysarg),Item.getItemName(itemidx),   itemDes )   --要全服广播
	          --System.broadcastTipmsg(tipMsg,ttGmTip )
	        end
	--]]
          
    --遍历掉落列表，并添加玩家的物品
  local items = drop:proabilityDrop(sysarg)
  if ( items.itemCount > 0) then
	  for i=0, items.itemCount -1 do
		LActor.addItem(sysarg, items.itemList[i].wItemId, items.itemList[i].btQuality,
        items.itemList[i].btStrong,
        items.itemList[i].btCount,items.itemList[i].btBind,"roll",1)
        if(items.itemList[i].btAuxParam ==1)  then
           local tipMsg = string.format(Lang.ScriptTips.x00085,LActor.getName(sysarg),Item.getItemName(itemidx),   Item.getItemName(items.itemList[i].wItemId) )   --要全服广播
          --System.broadcastTipmsg(tipMsg,ttGmTip )
        end
	  end
  end
  
end

--初始化按概率综合爆物品 
function InitProabilityDropItem(sysarg)
    
  for i = 1,table.getn(ProabolityItemConfig) do
    local x = ProabolityItemConfig[i]
    
    GlobalItemFn[x.item_id] = { func = ProbablityItemFunc,params =x }
    
    --在初始化的时候全部装载进来 ,避免后期临时去加载
    local dropName = "proability"..tostring(x.item_id)
    local boxdrop = System.getObjectVar(dropName)
    if (not boxdrop) then
		   boxdrop = CBoxDropMgr:getSingleton():createBoxDrop(dropName)  -- 这里会返回一个宝箱掉落对象(CBoxDrop)
			 if(boxdrop) then
			    boxdrop:load(x.dropName)
       end
    end
  end

end

--table.insert(InitFnTable,InitProabilityDropItem)