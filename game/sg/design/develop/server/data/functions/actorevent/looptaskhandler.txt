--lua script
--周环任务相关逻辑

--#include "data\config\looptask\loopTaskConfig.txt" once
--#include "data\config\quest\miscquest.txt" once
--#include "data\functions\actorevent\actorloginhandler.txt" once
--#include "data\functions\gmevent.txt" once
--#include "data\config\quest\customquest.txt" once

LoopTaskFunc = {}

LoopTaskFunc.main = function (sysarg, systemid, msgid, packet)
  if LoopTaskFunc[msgid] then
    LoopTaskFunc[msgid](sysarg, packet)
  end
end

--================= 辅助函数 及结构 ======================
LoopTaskFunc.isClose = function(sysarg)
	if loopTaskConfig.SYSTEM_SWITCH ~= 1 or LActor.getIntProperty(sysarg, PROP_LEVEL) < loopTaskConfig.OPEN_LEVEL then
		return true
	else
		return false
	end
end

LoopTaskFunc.initData = function (sysarg)
	local var = LActor.getStaticVar(sysarg)
	if var == nil then return end
	if var.loopTask == nil then
		var.loopTask = {}
		var.loopTask.isFirst = 1 --是否首次接跑环任务
		var.loopTask.finishLoop = 0 	--已完成环数
		var.loopTask.curLoop = 0 	--当前环数
		var.loopTask.curTaskId = 0	--当前任务id
		var.loopTask.taskState = 0	--任务状态（0没有接，1正在进行）
		var.loopTask.awardStatus = {} --已领奖励的环
		var.loopTask.expAward = nil --特殊环附加经验奖励
	end
end

--随机任务
LoopTaskFunc.getRandTaskByLoop = function(loopId, sysarg)
	if not loopTaskConfig.loopDiff[loopId] or not loopTaskConfig.grade[loopTaskConfig.loopDiff[loopId]] then return 0 end

	local subGrade = loopTaskConfig.grade[loopTaskConfig.loopDiff[loopId]]

	local actorLevel = LActor.getLevel(sysarg)
	local tasks = {}
	local totalRate = 0
	for i=1, #subGrade do
		if actorLevel >= subGrade[i].minLv then
			tasks = {}
			totalRate = 0
			for _, task in pairs(subGrade[i].tasks) do
				table.insert(tasks, task)
				totalRate = totalRate + task.rate
			end
		end
	end
	if #tasks == 0 then
		return 0
	end

	totalRate = totalRate + LoopTaskFunc.getExtraQuestId(sysarg, tasks)

	local rateNum = System.getRandomNumber(totalRate)
	local minRate = 0
	for k , v in pairs (tasks) do	
		if rateNum >= minRate  and rateNum < minRate + v.rate then
			return v.qid
		end
		minRate = minRate + v.rate
	end

	return 0
end

--获取额外的任务id
function LoopTaskFunc.getExtraQuestId(sysarg, questTable)
	local level = LActor.getLevel(sysarg)

	local totalRate = 0
	for k, questsConfig in pairs(loopTaskConfig.extraQuestId.level) do
		if level >= k then
			for _, task in pairs(questsConfig) do
				table.insert(questTable, task)
				totalRate = totalRate + task.rate
			end
		end
	end

	for _, v in pairs(loopTaskConfig.extraQuestId.specialQuest) do
		if v.MinLevel <= level and v.HigthLevel >= level then
			for questTarget, questConfig in pairs(v.list) do
				if OnGetQuestTargetCount(sysarg, questTarget, questConfig.target) ~= 0 then		
					table.insert(questTable, questConfig)
					totalRate = totalRate + questConfig.rate
				end
			end
			break
		end
	end
	return totalRate
end

--完成任务时，多倍奖励
LoopTaskFunc.onFinishLoopTask = function(sysarg, loopId, taskId)
	local rate = 0
	local times = 1
	for _, conf in ipairs(loopTaskConfig.awardsRate) do
		if loopId <= conf.maxLoopId then
			local randVal = System.getRandomNumber( 100 ) + 1
			for _, value in ipairs(conf.rate) do
				if randVal <= value.probability then
					times = value.rate
					break
				end
			end
			break
		end
	end
	if not times then return end

	times = times * getAcitivityIsDouble(daLoopquest)

	local awardInfo = LActor.getAwardConfExpMoney(sysarg, taskId)
	if awardInfo.exp ~= 0 then
		LActor.addExp(sysarg, awardInfo.exp*times, 207, taskId)
	end
	if awardInfo.money ~= 0 then
		LActor.changeMoney(sysarg, mtBindCoin, awardInfo.money*times, 207, true, "loopquest_rate")
	end

	System.logCounter(LActor.getActorId(sysarg), LActor.getAccountName(sysarg), tostring(LActor.getLevel(sysarg)), "pao_huan", "", "", tostring(loopId), "", "", "", "", lfBI)
end

--刷新周跑环任务
LoopTaskFunc.refreshLoop = function(sysarg, giveup)
	LoopTaskFunc.initData(sysarg)
	local var = LActor.getStaticVar(sysarg)
	if var == nil or  var.loopTask == nil then return end

	var.loopTask.taskState = 0
	if not giveup then
		var.loopTask.curLoop = var.loopTask.curLoop + 1
		var.loopTask.finishLoop = var.loopTask.finishLoop + 1
		LoopTaskFunc.onFinishLoopTask(sysarg, var.loopTask.curLoop, var.loopTask.curTaskId)
	else
		var.loopTask.curLoop = 1 	--放弃任务，重置环数
	end

	if var.loopTask.finishLoop < loopTaskConfig.maxLoopId then
		var.loopTask.curTaskId = LoopTaskFunc.getRandTaskByLoop(var.loopTask.curLoop , sysarg)
	else
		var.loopTask.curTaskId = 0
	end

	LActor.setLoopAcceptQuestId(sysarg, var.loopTask.curTaskId)
	LoopTaskFunc.sendLoopTaskInfo(sysarg)
end

-- 每周一重设 或 玩家上线时重设
LoopTaskFunc.resetLoopTask = function(sysarg)
	LoopTaskFunc.initData(sysarg)
	local var = LActor.getStaticVar(sysarg)
	if var == nil or  var.loopTask == nil then return end

	local now = System.getCurrMiniTime()
	if not var.loopTask.lastResetTime or System.isSameWeek_new(now, var.loopTask.lastResetTime) == false then
		if var.loopTask.curTaskId > 0 and LActor.hasQuest(sysarg, var.loopTask.curTaskId) then
			LActor.GiveUpQuest(sysarg, var.loopTask.curTaskId)
		end

		local taskId = LoopTaskFunc.getRandTaskByLoop(1, sysarg)
		local day = System.getDayOfWeek()
		if day == 0 then day = 7 end

		var.loopTask.lastResetTime = now
		var.loopTask.finishLoop = 0
		var.loopTask.curLoop = 1
		var.loopTask.curTaskId = taskId
		var.loopTask.taskState = 0
		var.loopTask.awardStatus = {} --已领奖励的环

		LActor.setLoopAcceptQuestId(sysarg, taskId)
	end
end

--======================协议=======================
LoopTaskFunc.sendLoopTaskInfo = function(sysarg)
	if LoopTaskFunc.isClose(sysarg) then
		-- LActor.sendTipmsg( sysarg, Lang.ScriptTips.lt001, ttMessage ) 
		return
	end

	LoopTaskFunc.initData(sysarg)
	local var = LActor.getStaticVar(sysarg)
	if var == nil or  var.loopTask == nil then return end

	--======== 检查是否全部奖都领了 =========
	local isAllRecieve = true --是否全部都领了
	local awardLoops = {} --各环奖励状态
	for i=1, #loopTaskConfig.awards do
		local award = loopTaskConfig.awards[i]
		local idx = #awardLoops+1
		awardLoops[idx] = {loopId=award.loopId, status=0} --初始化为此奖不可领取状态
		if var.loopTask.finishLoop >= loopTaskConfig.awards[i].loopId then
			awardLoops[idx].status = 1 --改为此奖可领取状态
		end
	end
	for i=1, #awardLoops do
		for j=1, #var.loopTask.awardStatus do
			if var.loopTask.awardStatus[j] == awardLoops[i].loopId then
				awardLoops[i].status = 2 --改为此奖已领取状态
				break
			end
		end
		if awardLoops[i].status == 1 then
			isAllRecieve = false
		end
	end
	--======== end 检查是否全部奖都领了 =========

	local npack = DataPack.allocPacket(sysarg,146,1)
	if npack == nil then return end

	if isAllRecieve then
		--如果东西已经全领了，且已经做完所有环了
		if var.loopTask.finishLoop > loopTaskConfig.maxLoopId then
			DataPack.writeByte(npack, 0)
		else
			DataPack.writeByte(npack, 1)
		end
	else
		DataPack.writeByte(npack, 2)
	end
	DataPack.writeInt(npack, var.loopTask.finishLoop)
	DataPack.writeInt(npack, var.loopTask.taskState)
	DataPack.writeInt(npack, var.loopTask.curLoop)
	DataPack.writeInt(npack, var.loopTask.curTaskId)
	DataPack.writeInt(npack, #awardLoops)

	for i=1, #awardLoops do
		DataPack.writeInt(npack, awardLoops[i].loopId)
		DataPack.writeByte(npack, awardLoops[i].status)
	end
	DataPack.flush(npack)
end

--下发丢骰子结果
LoopTaskFunc.sendLoopRand = function(sysarg, randTimes, loopId)
	local npack = DataPack.allocPacket(sysarg,146,4)
	if npack == nil then return end
	DataPack.writeByte(npack, randTimes)
	DataPack.writeInt(npack, loopId)
	DataPack.flush(npack)
end

LoopTaskFunc[1] = function(sysarg)
	LoopTaskFunc.sendLoopTaskInfo(sysarg)
end

LoopTaskFunc[2] = function(sysarg, dp)
	if not sysarg or not dp then return end

	if LoopTaskFunc.isClose(sysarg) then
		LActor.sendTipmsg( sysarg, Lang.ScriptTips.lt001, ttMessage ) 
		return
	end
	local loopId = DataPack.readInt(dp)

	local var = LActor.getStaticVar(sysarg)
	if var == nil or  var.loopTask == nil then return end

	-- 还没完成
	if var.loopTask.finishLoop < loopId then
		return
	end

	for i=1, #var.loopTask.awardStatus do
		--已经领过
		if var.loopTask.awardStatus[i] == loopId then
			return
		end
	end

	--已完成且还未领，则：
	local itemId = 0
	for i=1, #loopTaskConfig.awards do
		if loopId == loopTaskConfig.awards[i].loopId then
			itemId = loopTaskConfig.awards[i].itemid
			break
		end
	end
	if itemId > 0 then
		if Item.getBagEmptyGridCount( sysarg ) < 1 then
			local str = string.format(Lang.ScriptTips.f00016,1)
			LActor.sendTipmsg( sysarg, str,ttDialog )
			return
		end
		LActor.addItem(sysarg, itemId, 0, 0, 1, 1, "loop_task_award", 22)

		-- 播放特效
		local effects = {}
		local effect = {}
		effect.type = 1  -- 1为物品,暂时只支持发物品所以写死
		effect.id = itemId
		effect.count = 1
		effects[#effects+1] = effect
		if #effects > 0 then
			MiscFunc.PlayItemEffect(sysarg, 11, effects)
		end

		var.loopTask.awardStatus[#var.loopTask.awardStatus+1] = loopId
		LoopTaskFunc.sendLoopTaskInfo(sysarg)
	end
end

LoopTaskFunc[6] = function(sysarg)
	-- if LoopTaskFunc.isClose(sysarg) then
	-- 	LActor.sendTipmsg( sysarg, Lang.ScriptTips.lt001, ttMessage ) 
	-- 	return
	-- end
	-- local var = LActor.getStaticVar(sysarg)
	-- if var == nil or  var.loopTask == nil or var.loopTask.expAward == nil then
	-- 	return
	-- end

	-- if var.loopTask.expAward.loopId > 0 and var.loopTask.expAward.times > 0 and var.loopTask.expAward.taskId > 0 then
	-- 	local exp = var.loopTask.expAward.times * LActor.getAwardConfExp(sysarg, var.loopTask.expAward.taskId)
	-- 	local tipmsg = string.format(Lang.ScriptTips.lt003, var.loopTask.expAward.times, exp)
	-- 	LActor.sendTipmsg( sysarg, tipmsg, ttMessage ) 
	-- 	var.loopTask.expAward = nil
	-- 	LActor.addExp(sysarg, exp, 0, 0)
	-- end
end
--====================== end 协议 =========================

function checkAddLoopQuest(sysarg, qid, type)
	if type == qtLoop then
		local var = LActor.getStaticVar(sysarg)
		if var and var.loopTask and var.loopTask.curTaskId and var.loopTask.curTaskId == qid then return true end
	elseif type == qtHuangbang then
		local var = HuangbangQuest.getActorVar(sysarg)
		if var and var.curQuestId and var.curQuestId == qid then return true end
	else
		return true
	end
	return false
end

--======================= 事件处理 ==================
EventCallDispatcher.handleLoopQuestFisinsh = function (sysarg, arg)
	if not sysarg or not arg then return end
	if arg[3] ~= qtLoop then return end

	local var = LActor.getStaticVar(sysarg)
	if var ~= nil and var.loopTask ~= nil and var.loopTask.curTaskId ~= nil and var.loopTask.curTaskId == arg[2] then
		if arg[1] == seAddQuest then
			var.loopTask.taskState = 1
			LActor.setLoopAcceptQuestId(sysarg, 0)
			LoopTaskFunc.sendLoopTaskInfo(sysarg)
		elseif arg[1] == seFinish then
			ActivationTrigger( sysarg, 28)
			LoopTaskFunc.refreshLoop(sysarg)
		elseif arg[1] == seGiveUp then
			LoopTaskFunc.refreshLoop(sysarg, true)
		end
	else
		print("error loopquest data")
		print(var.loopTask.curTaskId)
		print(arg[2])
	end
end


EventCallDispatcher.handlerNewDayForLoopTask = function (sysarg)
	if not LoopTaskFunc.isClose(sysarg) and LActor.getIntProperty(sysarg, PROP_LEVEL) >= loopTaskConfig.OPEN_LEVEL then
		LoopTaskFunc.resetLoopTask(sysarg)
		LoopTaskFunc.sendLoopTaskInfo(sysarg)
	end
end

EventCallDispatcher.handlerLoginForLoopTask = function (sysarg)
	if LoopTaskFunc.isClose(sysarg) or LActor.getIntProperty(sysarg, PROP_LEVEL)  < loopTaskConfig.OPEN_LEVEL then return end

	local var = LActor.getStaticVar(sysarg)
	if var == nil or  var.loopTask == nil or var.loopTask.curTaskId == 0 or var.loopTask.taskState ~= 0 then return end

	LActor.setLoopAcceptQuestId(sysarg, var.loopTask.curTaskId)
end

EventCallDispatcher.registerEventCall(BaseTypes.ActorEventId.aeQuestEvent, EventCallDispatcher.handleLoopQuestFisinsh)
EventCallDispatcher.registerEventCall(BaseTypes.ActorEventId.aeLevel, EventCallDispatcher.handlerNewDayForLoopTask)
EventCallDispatcher.registerEventCall(BaseTypes.ActorEventId.aeNewDayArrive, EventCallDispatcher.handlerNewDayForLoopTask)
EventCallDispatcher.registerEventCall(BaseTypes.ActorEventId.aeUserLogin, EventCallDispatcher.handlerLoginForLoopTask)



--gm命令
LoopTaskFunc.GmLoopQuest = function(sysarg, arg)
	local gmid = tonumber(arg[1])
	if gmid == 1 then
		local var = LActor.getStaticVar(sysarg)
		if var ~= nil and var.loopTask ~= nil and var.loopTask.curTaskId ~= nil and var.loopTask.curTaskId > 0 then
			if LActor.addQuest(sysarg, var.loopTask.curTaskId) == true then -- 里面会判断是否有该任务
				if var.loopTask.curTaskId ~= nil and var.loopTask.finishLoop ~= nil then
					-- LActor.setQuestValue(sysarg, var.loopTask.curTaskId, GlobalConfig.loopTaskTargetId, var.loopTask.finishLoop)
				end
			end
			-- LActor.GiveUpQuest(sysarg, var.loopTask.curTaskId)
		end
	elseif gmid == 2 then
		LoopTaskFunc.sendLoopTaskInfo(sysarg)
	elseif gmid == 3 then
		LoopTaskFunc.getRandTaskByLoop(1, sysarg)
	elseif gmid == 4 then
		local var = LActor.getStaticVar(sysarg)
		if not var or not var.loopTask then return end

		var.loopTask.finishLoop = tonumber(arg[2])
		LoopTaskFunc.sendLoopTaskInfo(sysarg)
	end

end

GmEventFuncList.register( "loopquest", LoopTaskFunc.GmLoopQuest, 1)

